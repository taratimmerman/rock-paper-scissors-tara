{"mappings":"AKEO,MAAM,EAA6B,CACxC,CAAE,KAAM,OAAQ,MAAO,CAAC,WAAW,AAAA,EACnC,CAAE,KAAM,QAAS,MAAO,CAAC,OAAO,AAAA,EAChC,CAAE,KAAM,WAAY,MAAO,CAAC,QAAQ,AAAA,EACrC,AFHK,OAAO,EAaX,aAAA,CAZQ,IAAA,CAAA,KAAK,CAAc,CACzB,OAAQ,CACN,OAAQ,EACR,SAAU,CACX,EACD,MAAO,CACL,OAAQ,GACR,SAAU,EACX,EACD,YAAa,CACd,EAGC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAG,IAAI,CAAC,mBAAmB,CAAC,UACpD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAG,IAAI,CAAC,mBAAmB,CAAC,YACtD,IAAI,CAAC,KAAK,CAAC,WAAW,CAAG,IAAI,CAAC,yBAAyB,EACzD,CAIA,eAAA,CACE,IAAM,EAAa,IAAI,CAAC,aAAa,GAC/B,EAAe,IAAI,CAAC,eAAe,GAEzC,GAAI,CAAC,GAAc,CAAC,EAAc,MAAO,gBAEzC,GAAI,IAAe,EAAc,MAAO,cAExC,IAAM,EAAiB,AAAA,EAAM,IAAI,CAAC,AAAC,GAAS,EAAK,IAAI,GAAK,SAG1D,AAFmB,CAAA,MAAA,EAAc,KAAA,EAAd,EAAgB,KAAK,CAAC,QAAQ,CAAC,EAAlD,GAGE,IAAI,CAAC,QAAQ,CAAC,SAAU,IAAI,CAAC,QAAQ,CAAC,UAAY,GAC3C,aAEP,IAAI,CAAC,QAAQ,CAAC,WAAY,IAAI,CAAC,QAAQ,CAAC,YAAc,GAC/C,iBAEX,CAIQ,oBAAoB,CAA0B,CAA9C,CACN,OAAO,SAAS,aAAa,OAAO,CAAC,CAAA,EAAG,EAAG,KAAA,CAAO,GAAK,IAAK,GAC9D,CAEA,SAAS,CAA0B,CAAnC,CACE,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAI,AAC/B,CAEA,SAAS,CAA0B,CAAE,CAAa,CAAlD,CACE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAI,CAAG,EACzB,aAAa,OAAO,CAAC,CAAA,EAAG,EAAG,KAAA,CAAO,CAAE,EAAM,QAAQ,GACpD,CAIA,cAAc,CAAU,CAAxB,CACE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAG,CAC5B,CAEA,eAAA,CACE,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,AAChC,CAEA,YAAA,CACE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAG,EAC5B,CAEA,gBAAgB,CAAU,CAA1B,CACE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAG,CAC9B,CAEA,iBAAA,CACE,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,AAClC,CAEA,oBAAA,CACE,IAAM,EAAc,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,AAAA,EAAM,MAAM,EAC3D,IAAI,CAAC,eAAe,CAAC,AAAA,CAAK,CAAC,EAAY,CAAC,IAAI,CAC9C,CAIQ,2BAAA,CACN,OAAO,SAAS,aAAa,OAAO,CAAC,gBAAkB,IAAK,GAC9D,CAEA,gBAAA,CACE,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,AAC/B,CAEA,eAAe,CAAa,CAA5B,CACE,IAAI,CAAC,KAAK,CAAC,WAAW,CAAG,EACzB,aAAa,OAAO,CAAC,cAAe,EAAM,QAAQ,GACpD,CAEA,qBAAA,CACE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,cAAc,GAAK,EAC9C,CACD,CGtGK,MAAO,EAAb,aAAA,CACU,IAAA,CAAA,SAAS,CAAG,SAAS,cAAc,CAAC,WACpC,IAAA,CAAA,aAAa,CAAG,SAAS,cAAc,CAAC,gBACxC,IAAA,CAAA,eAAe,CAAG,SAAS,cAAc,CAAC,kBAC1C,IAAA,CAAA,OAAO,CAAG,SAAS,cAAc,CAAC,eAClC,IAAA,CAAA,QAAQ,CAAG,SAAS,cAAc,CAAC,eA6D7C,CAzDE,cAAc,CAAY,CAA1B,CACM,IAAI,CAAC,SAAS,EAChB,CAAA,IAAI,CAAC,SAAS,CAAC,WAAW,CAAG,CAD/B,CAGF,CAEA,kBAAkB,CAAa,CAA/B,CACE,IAAM,EAAM,SAAS,cAAc,CAAC,cAChC,GAAK,CAAA,EAAI,KAAK,CAAC,OAAO,CAAG,EAAO,SAAW,MAA/C,CACF,CAEA,YAAY,CAAa,CAAzB,CACE,IAAM,EAAY,SAAS,cAAc,CAAC,SACtC,IACF,EAAU,WAAW,CAAG,CAAA,MAAA,EAAS,EAAA,CAAO,CACxC,EAAU,KAAK,CAAC,OAAO,CAAG,QAE9B,CAEA,iBACE,CAAqB,CACrB,CAAuB,CACvB,CAAc,CAHhB,CAKE,IAAI,CAAC,OAAO,CAAC,WAAW,CAAG,CAAA,WAAA,EAAc,EAAU,kBAAA,EAAqB,EAAY,CAAA,CAAG,CACvF,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAG,EAAO,WAAW,GAC9C,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAG,QAC7B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAG,OAChC,CAEA,kBAAkB,CAAa,CAA/B,CACE,CAAC,OAAQ,QAAS,WAAW,CAAC,OAAO,CAAC,AAAC,IACrC,IAAM,EAAM,SAAS,cAAc,CAAC,GAChC,GAAK,CAAA,EAAI,KAAK,CAAC,OAAO,CAAG,EAAO,SAAW,MAA/C,CACF,EACF,CAEA,gBAAgB,CAAa,CAA7B,CACE,IAAM,EAAM,SAAS,cAAc,CAAC,cAChC,GAAK,CAAA,EAAI,KAAK,CAAC,OAAO,CAAG,EAAO,eAAiB,MAArD,CACF,CAEA,mBAAA,CACE,IAAI,CAAC,iBAAiB,CAAC,CAAA,GACvB,IAAI,CAAC,eAAe,CAAC,CAAA,GAErB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAG,OAC7B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAG,MAChC,CAIA,aAAa,CAAc,CAAE,CAAgB,CAA7C,CACM,IAAI,CAAC,aAAa,EAAE,CAAA,IAAI,CAAC,aAAa,CAAC,WAAW,CAAG,EAAO,QAAQ,EAAxE,EACI,IAAI,CAAC,eAAe,EACtB,CAAA,IAAI,CAAC,eAAe,CAAC,WAAW,CAAG,EAAS,QAAQ,EADtD,CAEF,CACD,CE/DK,MAAO,EAIX,YAAY,CAAY,CAAE,CAAU,CAApC,CACE,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,IAAI,CAAG,CACd,CAEQ,WAAA,CACN,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAA,GAC5B,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAA,GAC5B,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,GACjD,CAEQ,iBAAA,CACN,IAAI,CAAC,IAAI,CAAC,YAAY,CACpB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,UACpB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,YAExB,CAEQ,iBAAA,CACN,IAAI,CAAC,KAAK,CAAC,mBAAmB,GAC9B,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,IAC/C,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAC7B,CAEA,YAAA,C,I,E,EACE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,+BACxB,IAAI,CAAC,eAAe,GACpB,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAA,GAC5B,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA,GAC1B,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAA,GAE5B,AAC+B,OAD/B,CAAA,EAAA,SACG,cAAc,CAAC,aAAA,GAAa,AAAA,KAAA,IAAA,GAAA,EAC3B,gBAAgB,CAAC,QAAS,IAAM,IAAI,CAAC,SAAS,IAElD,AAC+B,OAD/B,CAAA,EAAA,SACG,cAAc,CAAC,aAAA,GAAa,AAAA,KAAA,IAAA,GAAA,EAC3B,gBAAgB,CAAC,QAAS,IAAM,IAAI,CAAC,eAAe,IAExD,AAAA,EAAM,GAAG,CAAC,AAAC,GAAM,EAAE,IAAI,EAAE,OAAO,CAAC,AAAC,I,I,CAChC,AACqB,QADrB,CAAA,EAAA,SACG,cAAc,CAAC,EAAA,GAAG,AAAA,KAAA,IAAA,GAAA,EACjB,gBAAgB,CAAC,QAAS,IAAM,IAAI,CAAC,gBAAgB,CAAC,GAC5D,EACF,CAEQ,iBAAiB,CAAU,CAA3B,CACN,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,GACzB,IAAI,CAAC,KAAK,CAAC,kBAAkB,GAE7B,IAAM,EAAa,IAAI,CAAC,KAAK,CAAC,aAAa,GACrC,EAAe,IAAI,CAAC,KAAK,CAAC,eAAe,GACzC,EAAS,IAAI,CAAC,KAAK,CAAC,aAAa,GAEvC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAY,EAAc,GACrD,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAA,GAC5B,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA,GAC1B,IAAI,CAAC,eAAe,EACtB,CACD,CPhED,SAAS,gBAAgB,CAAC,mBAAoB,KAK5C,AAFmB,IAAI,EAFT,IAAI,EACL,IAAI,GAGN,UAAU,EACvB","sources":["<anon>","src/index.ts","src/model/model.ts","../src/model/model.ts","src/utils/dataUtils.ts","../src/utils/dataUtils.ts","src/view.ts","src/controller/controller.ts","../src/controller/controller.ts"],"sourcesContent":["const $71f329d8a7c8539f$export$67f072146e5978c8 = [\n    {\n        name: \"rock\",\n        beats: [\n            \"scissors\"\n        ]\n    },\n    {\n        name: \"paper\",\n        beats: [\n            \"rock\"\n        ]\n    },\n    {\n        name: \"scissors\",\n        beats: [\n            \"paper\"\n        ]\n    }\n];\n\n\nclass $98c16915bb808846$export$a1edc412be3e1841 {\n    constructor(){\n        this.state = {\n            scores: {\n                player: 0,\n                computer: 0\n            },\n            moves: {\n                player: \"\",\n                computer: \"\"\n            },\n            roundNumber: 1\n        };\n        this.state.scores.player = this.getScoreFromStorage(\"player\");\n        this.state.scores.computer = this.getScoreFromStorage(\"computer\");\n        this.state.roundNumber = this.getRoundNumberFromStorage();\n    }\n    // ===== General Methods =====\n    evaluateRound() {\n        const playerMove = this.getPlayerMove();\n        const computerMove = this.getComputerMove();\n        if (!playerMove || !computerMove) return \"Invalid round\";\n        if (playerMove === computerMove) return \"It's a tie!\";\n        const playerMoveData = (0, $71f329d8a7c8539f$export$67f072146e5978c8).find((move)=>move.name === playerMove);\n        const playerWins = playerMoveData === null || playerMoveData === void 0 ? void 0 : playerMoveData.beats.includes(computerMove);\n        if (playerWins) {\n            this.setScore(\"player\", this.getScore(\"player\") + 1);\n            return \"You win!\";\n        } else {\n            this.setScore(\"computer\", this.getScore(\"computer\") + 1);\n            return \"Computer wins!\";\n        }\n    }\n    // ===== Score Methods =====\n    getScoreFromStorage(key) {\n        return parseInt(localStorage.getItem(`${key}Score`) || \"0\", 10);\n    }\n    getScore(key) {\n        return this.state.scores[key];\n    }\n    setScore(key, value) {\n        this.state.scores[key] = value;\n        localStorage.setItem(`${key}Score`, value.toString());\n    }\n    // ===== Move Methods =====\n    setPlayerMove(move) {\n        this.state.moves.player = move;\n    }\n    getPlayerMove() {\n        return this.state.moves.player;\n    }\n    resetMoves() {\n        this.state.moves.player = \"\";\n    }\n    setComputerMove(move) {\n        this.state.moves.computer = move;\n    }\n    getComputerMove() {\n        return this.state.moves.computer;\n    }\n    chooseComputerMove() {\n        const randomIndex = Math.floor(Math.random() * (0, $71f329d8a7c8539f$export$67f072146e5978c8).length);\n        this.setComputerMove((0, $71f329d8a7c8539f$export$67f072146e5978c8)[randomIndex].name);\n    }\n    // ===== Round Methods =====\n    getRoundNumberFromStorage() {\n        return parseInt(localStorage.getItem(`roundNumber`) || \"1\", 10);\n    }\n    getRoundNumber() {\n        return this.state.roundNumber;\n    }\n    setRoundNumber(value) {\n        this.state.roundNumber = value;\n        localStorage.setItem(`roundNumber`, value.toString());\n    }\n    increaseRoundNumber() {\n        this.setRoundNumber(this.getRoundNumber() + 1);\n    }\n}\n\n\nclass $ffbecafb1344018e$export$27a5bd065ad55220 {\n    constructor(){\n        this.messageEl = document.getElementById(\"message\");\n        this.playerScoreEl = document.getElementById(\"player-score\");\n        this.computerScoreEl = document.getElementById(\"computer-score\");\n        this.movesEl = document.getElementById(\"round-moves\");\n        this.resultEl = document.getElementById(\"round-result\");\n    }\n    // ===== General Methods =====\n    updateMessage(text) {\n        if (this.messageEl) this.messageEl.textContent = text;\n    }\n    toggleStartButton(show) {\n        const btn = document.getElementById(\"start-game\");\n        if (btn) btn.style.display = show ? \"inline\" : \"none\";\n    }\n    updateRound(round) {\n        const roundElem = document.getElementById(\"round\");\n        if (roundElem) {\n            roundElem.textContent = `Round ${round}`;\n            roundElem.style.display = \"block\";\n        }\n    }\n    showRoundOutcome(playerMove, computerMove, result) {\n        this.movesEl.textContent = `You played ${playerMove}. Computer played ${computerMove}.`;\n        this.resultEl.textContent = result.toUpperCase();\n        this.movesEl.style.display = \"block\";\n        this.resultEl.style.display = \"block\";\n    }\n    toggleMoveButtons(show) {\n        [\n            \"rock\",\n            \"paper\",\n            \"scissors\"\n        ].forEach((id)=>{\n            const btn = document.getElementById(id);\n            if (btn) btn.style.display = show ? \"inline\" : \"none\";\n        });\n    }\n    togglePlayAgain(show) {\n        const btn = document.getElementById(\"play-again\");\n        if (btn) btn.style.display = show ? \"inline-block\" : \"none\";\n    }\n    resetForNextRound() {\n        this.toggleMoveButtons(true);\n        this.togglePlayAgain(false);\n        this.movesEl.style.display = \"none\";\n        this.resultEl.style.display = \"none\";\n    }\n    // ===== Score Methods =====\n    updateScores(player, computer) {\n        if (this.playerScoreEl) this.playerScoreEl.textContent = player.toString();\n        if (this.computerScoreEl) this.computerScoreEl.textContent = computer.toString();\n    }\n}\n\n\n\nclass $44521653474fa731$export$bd0bf19f25da8474 {\n    constructor(model, view){\n        this.model = model;\n        this.view = view;\n    }\n    startGame() {\n        this.view.toggleStartButton(false);\n        this.view.toggleMoveButtons(true);\n        this.view.updateRound(this.model.getRoundNumber());\n    }\n    updateScoreView() {\n        this.view.updateScores(this.model.getScore(\"player\"), this.model.getScore(\"computer\"));\n    }\n    handleNextRound() {\n        this.model.increaseRoundNumber();\n        this.view.updateRound(this.model.getRoundNumber());\n        this.view.resetForNextRound();\n    }\n    initialize() {\n        var _a, _b;\n        this.view.updateMessage(\"Rock, Paper, Scissors, Tara\");\n        this.updateScoreView();\n        this.view.toggleMoveButtons(false);\n        this.view.togglePlayAgain(false);\n        this.view.toggleStartButton(true);\n        (_a = document.getElementById(\"start-game\")) === null || _a === void 0 || _a.addEventListener(\"click\", ()=>this.startGame());\n        (_b = document.getElementById(\"play-again\")) === null || _b === void 0 || _b.addEventListener(\"click\", ()=>this.handleNextRound());\n        (0, $71f329d8a7c8539f$export$67f072146e5978c8).map((m)=>m.name).forEach((id)=>{\n            var _a;\n            (_a = document.getElementById(id)) === null || _a === void 0 || _a.addEventListener(\"click\", ()=>this.handlePlayerMove(id));\n        });\n    }\n    handlePlayerMove(move) {\n        this.model.setPlayerMove(move);\n        this.model.chooseComputerMove();\n        const playerMove = this.model.getPlayerMove();\n        const computerMove = this.model.getComputerMove();\n        const result = this.model.evaluateRound();\n        this.view.showRoundOutcome(playerMove, computerMove, result);\n        this.view.toggleMoveButtons(false);\n        this.view.togglePlayAgain(true);\n        this.updateScoreView();\n    }\n}\n\n\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const model = new (0, $98c16915bb808846$export$a1edc412be3e1841)();\n    const view = new (0, $ffbecafb1344018e$export$27a5bd065ad55220)();\n    const controller = new (0, $44521653474fa731$export$bd0bf19f25da8474)(model, view);\n    controller.initialize();\n});\n\n\n//# sourceMappingURL=public.6a1f19bf.js.map\n","import { Model } from \"./model/model\";\nimport { View } from \"./view\";\nimport { Controller } from \"./controller/controller\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const model = new Model();\n  const view = new View();\n  const controller = new Controller(model, view);\n\n  controller.initialize();\n});\n","import { GameState, Move } from \"../utils/dataObjectUtils\";\nimport { MOVES } from \"../utils/dataUtils\";\n\nexport class Model {\n  private state: GameState = {\n    scores: {\n      player: 0,\n      computer: 0,\n    },\n    moves: {\n      player: \"\",\n      computer: \"\",\n    },\n    roundNumber: 1,\n  };\n\n  constructor() {\n    this.state.scores.player = this.getScoreFromStorage(\"player\");\n    this.state.scores.computer = this.getScoreFromStorage(\"computer\");\n    this.state.roundNumber = this.getRoundNumberFromStorage();\n  }\n\n  // ===== General Methods =====\n\n  evaluateRound(): string {\n    const playerMove = this.getPlayerMove();\n    const computerMove = this.getComputerMove();\n\n    if (!playerMove || !computerMove) return \"Invalid round\";\n\n    if (playerMove === computerMove) return \"It's a tie!\";\n\n    const playerMoveData = MOVES.find((move) => move.name === playerMove);\n    const playerWins = playerMoveData?.beats.includes(computerMove);\n\n    if (playerWins) {\n      this.setScore(\"player\", this.getScore(\"player\") + 1);\n      return \"You win!\";\n    } else {\n      this.setScore(\"computer\", this.getScore(\"computer\") + 1);\n      return \"Computer wins!\";\n    }\n  }\n\n  // ===== Score Methods =====\n\n  private getScoreFromStorage(key: \"player\" | \"computer\"): number {\n    return parseInt(localStorage.getItem(`${key}Score`) || \"0\", 10);\n  }\n\n  getScore(key: \"player\" | \"computer\"): number {\n    return this.state.scores[key];\n  }\n\n  setScore(key: \"player\" | \"computer\", value: number): void {\n    this.state.scores[key] = value;\n    localStorage.setItem(`${key}Score`, value.toString());\n  }\n\n  // ===== Move Methods =====\n\n  setPlayerMove(move: Move) {\n    this.state.moves.player = move;\n  }\n\n  getPlayerMove(): Move | \"\" {\n    return this.state.moves.player;\n  }\n\n  resetMoves(): void {\n    this.state.moves.player = \"\";\n  }\n\n  setComputerMove(move: Move) {\n    this.state.moves.computer = move;\n  }\n\n  getComputerMove(): Move | \"\" {\n    return this.state.moves.computer;\n  }\n\n  chooseComputerMove(): void {\n    const randomIndex = Math.floor(Math.random() * MOVES.length);\n    this.setComputerMove(MOVES[randomIndex].name);\n  }\n\n  // ===== Round Methods =====\n\n  private getRoundNumberFromStorage(): number {\n    return parseInt(localStorage.getItem(`roundNumber`) || \"1\", 10);\n  }\n\n  getRoundNumber(): number {\n    return this.state.roundNumber;\n  }\n\n  setRoundNumber(value: number): void {\n    this.state.roundNumber = value;\n    localStorage.setItem(`roundNumber`, value.toString());\n  }\n\n  increaseRoundNumber(): void {\n    this.setRoundNumber(this.getRoundNumber() + 1);\n  }\n}\n",null,"import { MoveData } from \"./dataObjectUtils\";\n\nexport const MOVES: readonly MoveData[] = [\n  { name: \"rock\", beats: [\"scissors\"] },\n  { name: \"paper\", beats: [\"rock\"] },\n  { name: \"scissors\", beats: [\"paper\"] },\n];\n",null,"import { Move } from \"./utils/dataObjectUtils\";\n\nexport class View {\n  private messageEl = document.getElementById(\"message\");\n  private playerScoreEl = document.getElementById(\"player-score\");\n  private computerScoreEl = document.getElementById(\"computer-score\");\n  private movesEl = document.getElementById(\"round-moves\")!;\n  private resultEl = document.getElementById(\"round-result\")!;\n\n  // ===== General Methods =====\n\n  updateMessage(text: string): void {\n    if (this.messageEl) {\n      this.messageEl.textContent = text;\n    }\n  }\n\n  toggleStartButton(show: boolean): void {\n    const btn = document.getElementById(\"start-game\");\n    if (btn) btn.style.display = show ? \"inline\" : \"none\";\n  }\n\n  updateRound(round: number): void {\n    const roundElem = document.getElementById(\"round\");\n    if (roundElem) {\n      roundElem.textContent = `Round ${round}`;\n      roundElem.style.display = \"block\";\n    }\n  }\n\n  showRoundOutcome(\n    playerMove: Move | \"\",\n    computerMove: Move | \"\",\n    result: string\n  ): void {\n    this.movesEl.textContent = `You played ${playerMove}. Computer played ${computerMove}.`;\n    this.resultEl.textContent = result.toUpperCase();\n    this.movesEl.style.display = \"block\";\n    this.resultEl.style.display = \"block\";\n  }\n\n  toggleMoveButtons(show: boolean): void {\n    [\"rock\", \"paper\", \"scissors\"].forEach((id) => {\n      const btn = document.getElementById(id);\n      if (btn) btn.style.display = show ? \"inline\" : \"none\";\n    });\n  }\n\n  togglePlayAgain(show: boolean): void {\n    const btn = document.getElementById(\"play-again\");\n    if (btn) btn.style.display = show ? \"inline-block\" : \"none\";\n  }\n\n  resetForNextRound(): void {\n    this.toggleMoveButtons(true);\n    this.togglePlayAgain(false);\n\n    this.movesEl.style.display = \"none\";\n    this.resultEl.style.display = \"none\";\n  }\n\n  // ===== Score Methods =====\n\n  updateScores(player: number, computer: number): void {\n    if (this.playerScoreEl) this.playerScoreEl.textContent = player.toString();\n    if (this.computerScoreEl)\n      this.computerScoreEl.textContent = computer.toString();\n  }\n}\n","import { Model } from \"../model/model\";\nimport { View } from \"../view\";\nimport { Move } from \"../utils/dataObjectUtils\";\nimport { MOVES } from \"../utils/dataUtils\";\n\nexport class Controller {\n  private model: Model;\n  private view: View;\n\n  constructor(model: Model, view: View) {\n    this.model = model;\n    this.view = view;\n  }\n\n  private startGame(): void {\n    this.view.toggleStartButton(false);\n    this.view.toggleMoveButtons(true);\n    this.view.updateRound(this.model.getRoundNumber());\n  }\n\n  private updateScoreView(): void {\n    this.view.updateScores(\n      this.model.getScore(\"player\"),\n      this.model.getScore(\"computer\")\n    );\n  }\n\n  private handleNextRound(): void {\n    this.model.increaseRoundNumber();\n    this.view.updateRound(this.model.getRoundNumber());\n    this.view.resetForNextRound();\n  }\n\n  initialize(): void {\n    this.view.updateMessage(\"Rock, Paper, Scissors, Tara\");\n    this.updateScoreView();\n    this.view.toggleMoveButtons(false);\n    this.view.togglePlayAgain(false);\n    this.view.toggleStartButton(true);\n\n    document\n      .getElementById(\"start-game\")\n      ?.addEventListener(\"click\", () => this.startGame());\n\n    document\n      .getElementById(\"play-again\")\n      ?.addEventListener(\"click\", () => this.handleNextRound());\n\n    MOVES.map((m) => m.name).forEach((id) => {\n      document\n        .getElementById(id)\n        ?.addEventListener(\"click\", () => this.handlePlayerMove(id));\n    });\n  }\n\n  private handlePlayerMove(move: Move): void {\n    this.model.setPlayerMove(move);\n    this.model.chooseComputerMove();\n\n    const playerMove = this.model.getPlayerMove();\n    const computerMove = this.model.getComputerMove();\n    const result = this.model.evaluateRound();\n\n    this.view.showRoundOutcome(playerMove, computerMove, result);\n    this.view.toggleMoveButtons(false);\n    this.view.togglePlayAgain(true);\n    this.updateScoreView();\n  }\n}\n",null],"names":["$71f329d8a7c8539f$export$67f072146e5978c8","name","beats","$98c16915bb808846$export$a1edc412be3e1841","constructor","state","scores","player","computer","moves","roundNumber","getScoreFromStorage","getRoundNumberFromStorage","evaluateRound","playerMove","getPlayerMove","computerMove","getComputerMove","playerMoveData","find","move","includes","setScore","getScore","key","parseInt","localStorage","getItem","value","setItem","toString","setPlayerMove","resetMoves","setComputerMove","chooseComputerMove","randomIndex","Math","floor","random","length","getRoundNumber","setRoundNumber","increaseRoundNumber","$ffbecafb1344018e$export$27a5bd065ad55220","messageEl","document","getElementById","playerScoreEl","computerScoreEl","movesEl","resultEl","updateMessage","text","textContent","toggleStartButton","show","btn","style","display","updateRound","round","roundElem","showRoundOutcome","result","toUpperCase","toggleMoveButtons","forEach","id","togglePlayAgain","resetForNextRound","updateScores","$44521653474fa731$export$bd0bf19f25da8474","model","view","startGame","updateScoreView","handleNextRound","initialize","_a","_b","addEventListener","map","m","handlePlayerMove","controller"],"version":3,"file":"public.6a1f19bf.js.map"}