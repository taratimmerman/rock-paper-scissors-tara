const t={PLAYER:"player",COMPUTER:"computer"},e=[0,50,100,null],o={matchRoundNumber:1,playerHealth:100,computerHealth:100},a={player:"playerHealth",computer:"computerHealth"},s={ROCK:"rock",PAPER:"paper",SCISSORS:"scissors",TARA:"tara"},r=[{name:s.ROCK,beats:[s.SCISSORS]},{name:s.PAPER,beats:[s.ROCK]},{name:s.SCISSORS,beats:[s.PAPER]},{name:s.TARA,beats:[s.ROCK,s.PAPER,s.SCISSORS]}],i=r.map(t=>t.name),l=new Map(r.map(t=>[t.name,t])),h=r.filter(t=>t.name!==s.TARA),n=h.map(t=>t.name);h.map(t=>[t.name,t]);const m="Score",u="TaraCount",g="MostCommonMove",c="MoveCounts",M="roundNumber",d="globalMatchNumber",v="currentMatch",C={[s.ROCK]:0,[s.PAPER]:0,[s.SCISSORS]:0};class p{formatKey(t,e){return`${t}${e}`}safelySetItem(t,e){try{localStorage.setItem(t,e)}catch(e){console.warn(`LocalStorage Error: Failed to save "${t}".`,e)}}getScore(t){let e=this.formatKey(t,m);return parseInt(localStorage.getItem(e)||"0",10)}getTaraCount(t){let e=this.formatKey(t,u);return parseInt(localStorage.getItem(e)||"0",10)}getMostCommonMove(t){let e=this.formatKey(t,g),o=localStorage.getItem(e);return o&&n.includes(o)?o:null}getMoveCounts(t){let e=this.formatKey(t,c);try{let t=localStorage.getItem(e);return t?JSON.parse(t):C}catch(t){return console.warn(`LocalStorage Error: Failed to parse "${e}".`,t),C}}getGlobalMatchNumber(){let t=localStorage.getItem(d);return null!==t?parseInt(t,10):null}getMatch(){try{let t=localStorage.getItem(v);return t?JSON.parse(t):null}catch(t){return console.warn("LocalStorage Error: Failed to parse currentMatch.",t),null}}getOldGlobalRoundNumber(){let t=localStorage.getItem(M);if(null===t)return null;let e=parseInt(t,10);return isNaN(e)?(console.warn(`Legacy 'roundNumber' in localStorage (${t}) is not a valid number. Skipping migration.`),null):e}setScore(t,e){let o=this.formatKey(t,m);this.safelySetItem(o,e.toString())}setTaraCount(t,e){let o=this.formatKey(t,u);this.safelySetItem(o,e.toString())}setMostCommonMove(t,e){let o=this.formatKey(t,g);e?this.safelySetItem(o,e):localStorage.removeItem(o)}setMoveCounts(t,e){let o=this.formatKey(t,c);this.safelySetItem(o,JSON.stringify(e))}setGlobalMatchNumber(t){t?this.safelySetItem(d,t.toString()):localStorage.removeItem(d)}setMatch(t){t?this.safelySetItem(v,JSON.stringify(t)):localStorage.removeItem(v)}removeScore(t){let e=this.formatKey(t,m);localStorage.removeItem(e)}removeTaraCount(t){let e=this.formatKey(t,u);localStorage.removeItem(e)}removeMostCommonMove(t){let e=this.formatKey(t,g);localStorage.removeItem(e)}removeMoveCounts(t){let e=this.formatKey(t,c);localStorage.removeItem(e)}removeHistory(t){let e=this.formatKey(t,"History");localStorage.removeItem(e)}removeGlobalMatchNumber(){localStorage.removeItem(d)}removeOldGlobalRoundNumber(){localStorage.removeItem(M)}}class S{state={scores:{player:0,computer:0},moves:{player:null,computer:null},taras:{player:0,computer:0},mostCommonMove:{player:null,computer:null},moveCounts:{player:{rock:0,paper:0,scissors:0},computer:{rock:0,paper:0,scissors:0}},globalMatchNumber:null,currentMatch:null};gameStorage;constructor(e=new p){this.gameStorage=e,this.state.scores.player=this.gameStorage.getScore(t.PLAYER),this.state.scores.computer=this.gameStorage.getScore(t.COMPUTER),this.state.taras.player=this.gameStorage.getTaraCount(t.PLAYER),this.state.taras.computer=this.gameStorage.getTaraCount(t.COMPUTER),this.state.mostCommonMove.player=this.gameStorage.getMostCommonMove(t.PLAYER),this.state.mostCommonMove.computer=this.gameStorage.getMostCommonMove(t.COMPUTER),this.state.moveCounts.player=this.gameStorage.getMoveCounts(t.PLAYER),this.state.moveCounts.computer=this.gameStorage.getMoveCounts(t.COMPUTER),this._loadOrMigrateMatchState()}doesMoveBeat(t,e){return l.get(t)?.beats.includes(e)??!1}handleRoundWin(t,e){if(this.isStandardMove(e)){let e=this.getTaraCount(t);e<3&&this.setTaraCount(t,e+1)}}evaluateRound(){let e=this.getPlayerMove(),o=this.getComputerMove();return null===e||null===o?"Invalid round":(this.handleTaraMove(t.PLAYER,e),this.handleTaraMove(t.COMPUTER,o),e===o)?"It's a tie!":this.doesMoveBeat(e,o)?(this.handleRoundWin(t.PLAYER,e),this.decrementHealth(t.COMPUTER),"You win the round!"):(this.handleRoundWin(t.COMPUTER,o),this.decrementHealth(t.PLAYER),"Computer wins the round!")}isMatchActive(){return null!==this.gameStorage.getMatch()}setScore(t,e){this.state.scores[t]=e,this.gameStorage.setScore(t,e)}getScore(t){return this.state.scores[t]}resetScore(t){this.state.scores[t]=0,this.gameStorage.removeScore(t)}setPlayerScore(e){this.setScore(t.PLAYER,e)}setComputerScore(e){this.setScore(t.COMPUTER,e)}getPlayerScore(){return this.getScore(t.PLAYER)}getComputerScore(){return this.getScore(t.COMPUTER)}resetScores(){this.resetScore(t.PLAYER),this.resetScore(t.COMPUTER)}isStandardMove(t){return"string"==typeof t&&t!==s.TARA}setMove(t,e){this.state.moves[t]=e}getMove(t){return this.state.moves[t]}determineMostCommonMove(t){let e=null,o=0,a=!1;for(let[s,r]of Object.entries(t))r>o?(o=r,e=s,a=!1):r===o&&0!==r&&(a=!0);return a?null:e}resetMostCommonMove(t){this.state.mostCommonMove[t]=null,this.gameStorage.removeMostCommonMove(t)}setMostCommonMove(t,e){let o=this.determineMostCommonMove(e);this.state.mostCommonMove[t]=o,this.gameStorage.setMostCommonMove(t,o)}getMostCommonMove(t){return this.state.mostCommonMove[t]}getAvailableMoves(t){return t?i:n}getBaseWeights(){return{[s.ROCK]:1,[s.PAPER]:1,[s.SCISSORS]:1,[s.TARA]:0}}getTaraWeight(t){if(!t.includes(s.TARA))return null;let{player:e,computer:o}=this.state.scores,a=e-o;return a>0?Math.min(3+a,10):a<0?1:2}getStandardMoveWeights(){let t={[s.ROCK]:1,[s.PAPER]:1,[s.SCISSORS]:1},e=this.state.mostCommonMove.player;if(!e)return t;let o={[s.ROCK]:s.PAPER,[s.PAPER]:s.SCISSORS,[s.SCISSORS]:s.ROCK}[e];return{[s.ROCK]:o===s.ROCK?5:2,[s.PAPER]:o===s.PAPER?5:2,[s.SCISSORS]:o===s.SCISSORS?5:2}}chooseWeightedRandomMove(t,e){let o=t.flatMap(t=>Array(e[t]).fill(t)),a=Math.floor(Math.random()*o.length);return o[a]}getComputerMoveWeights(t){let e=this.getBaseWeights(),o=this.getTaraWeight(t),a=this.getStandardMoveWeights();return{...e,...a,...null!==o?{[s.TARA]:o}:{}}}getWeightedComputerMove(){let t=this.getComputerTaraCount()>0,e=this.getAvailableMoves(t),o=this.getComputerMoveWeights(e);return this.chooseWeightedRandomMove(e,o)}setPlayerMove(e){this.setMove(t.PLAYER,e)}getPlayerMove(){return this.getMove(t.PLAYER)}setComputerMove(e){this.setMove(t.COMPUTER,e)}getComputerMove(){return this.getMove(t.COMPUTER)}resetMoves(){this.setPlayerMove(null),this.setComputerMove(null)}chooseComputerMove(){let t=this.getWeightedComputerMove();this.registerComputerMove(t)}registerPlayerMove(e){this.setPlayerMove(e),this.isStandardMove(e)&&(this.setMoveCounts(t.PLAYER,e),this.setPlayerMostCommonMove())}registerComputerMove(e){this.setComputerMove(e),this.isStandardMove(e)&&(this.setMoveCounts(t.COMPUTER,e),this.setComputerMostCommonMove())}setPlayerMostCommonMove(){let e=this.getMoveCounts(t.PLAYER);this.setMostCommonMove(t.PLAYER,e)}setComputerMostCommonMove(){let e=this.getMoveCounts(t.COMPUTER);this.setMostCommonMove(t.COMPUTER,e)}resetMostCommonMoves(){this.resetMostCommonMove(t.PLAYER),this.resetMostCommonMove(t.COMPUTER)}getPlayerMostCommonMove(){return this.getMostCommonMove(t.PLAYER)}getComputerMostCommonMove(){return this.getMostCommonMove(t.COMPUTER)}setMoveCounts(t,e){this.state.moveCounts[t][e]=(this.state.moveCounts[t][e]||0)+1,this.gameStorage.setMoveCounts(t,this.state.moveCounts[t])}resetMoveCounts(t){this.state.moveCounts[t]={rock:0,paper:0,scissors:0},this.gameStorage.removeMoveCounts(t)}getMoveCounts(t){return this.state.moveCounts[t]}resetBothMoveCounts(){this.resetMoveCounts(t.PLAYER),this.resetMoveCounts(t.COMPUTER)}showMostCommonMove(){return null!==this.getPlayerMostCommonMove()||null!==this.getComputerMostCommonMove()}resetHistory(t){this.gameStorage.removeHistory(t)}resetHistories(){this.resetHistory(t.PLAYER),this.resetHistory(t.COMPUTER)}getRoundNumber(){return this.state.currentMatch?.matchRoundNumber??1}setRoundNumber(t){this.state.currentMatch&&(this.state.currentMatch.matchRoundNumber=t,this.gameStorage.setMatch(this.state.currentMatch))}increaseRoundNumber(){let t=this.getRoundNumber();this.setRoundNumber(t+1)}decrementTaraCount(t){let e=this.getTaraCount(t);e>1?this.setTaraCount(t,e-1):1===e&&this.resetTaraCount(t)}handleTaraMove(t,e){e===s.TARA&&(this.getTaraCount(t)>0?this.decrementTaraCount(t):this.setMove(t,s.ROCK))}setTaraCount(t,e){this.state.taras[t]=e,this.gameStorage.setTaraCount(t,e)}getTaraCount(t){return this.state.taras[t]}resetTaraCount(t){this.state.taras[t]=0,this.gameStorage.removeTaraCount(t)}setPlayerTaraCount(e){this.setTaraCount(t.PLAYER,e)}setComputerTaraCount(e){this.setTaraCount(t.COMPUTER,e)}resetTaras(){this.resetTaraCount(t.PLAYER),this.resetTaraCount(t.COMPUTER)}getPlayerTaraCount(){return this.getTaraCount(t.PLAYER)}getComputerTaraCount(){return this.getTaraCount(t.COMPUTER)}taraIsEnabled(){return this.getTaraCount(t.PLAYER)>0}handleMatchWin(){let t=this.getMatchWinner();return this.setScore(t,this.getScore(t)+1),t}setMatch(t){this.state.currentMatch=t,this.gameStorage.setMatch(t)}setMatchNumber(t){this.state.globalMatchNumber=t,this.gameStorage.setGlobalMatchNumber(t)}setDefaultMatchData(){this.isMatchActive()||this.setMatch({...o})}resetMatchData(){this.state.currentMatch=null,this.gameStorage.setMatch(null),this.setMatchNumber(null)}getMatchNumber(){return this.state.globalMatchNumber??1}isMatchOver(){return this.isDefeated(t.PLAYER)||this.isDefeated(t.COMPUTER)}getMatchWinner(){return this.isDefeated(t.PLAYER)?t.COMPUTER:t.PLAYER}incrementMatchNumber(){let t=this.getMatchNumber();this.setMatchNumber(t+1)}_loadOrMigrateMatchState(){if(this.isMatchActive()){this._loadExistingMatchState();return}let t=this.gameStorage.getOldGlobalRoundNumber();null!==t&&t>0&&this._migrateOldData(t)}_loadExistingMatchState(){this.state.globalMatchNumber=this.gameStorage.getGlobalMatchNumber(),this.state.currentMatch=this.gameStorage.getMatch()}_migrateOldData(t){this.setMatch({matchRoundNumber:t,playerHealth:100,computerHealth:100,initialHealth:100,damagePerLoss:50}),this.gameStorage.removeOldGlobalRoundNumber(),this.state.globalMatchNumber=1,this.gameStorage.setGlobalMatchNumber(this.state.globalMatchNumber)}getHealthKey(t){return a[t]}getHealth(t){let o=this.state.currentMatch;if(!o)return null;let a=o[this.getHealthKey(t)];return e.includes(a)?a:null}decrementHealth(t){let e=this.state.currentMatch;if(!e)return!1;let o=this.getHealthKey(t),a=e[o];return!(a<=0)&&(e[o]=Math.max(0,a-50),!0)}isDefeated(t){let e=this.getHealth(t);return null!==e&&e<=0}}class E{messageEl=this.getEl("message");overlay=this.getEl("overlay");controls=this.getEl("initial-controls");playerScoreEl=this.getEl("player-score");computerScoreEl=this.getEl("computer-score");playerHealthEl=this.getEl("player-health-text");computerHealthEl=this.getEl("computer-health-text");playerHealthBarEl=this.getEl("player-health");computerHealthBarEl=this.getEl("computer-health");playerTaraCountEl=this.getEl("player-tara");computerTaraCountEl=this.getEl("computer-tara");playerMostCommonMoveEl=this.getEl("player-most-common-move");computerMostCommonMoveEl=this.getEl("computer-most-common-move");matchEl=this.getEl("match");roundEl=this.getEl("round");outcomeEl=this.getEl("result-display");movesEl=this.getEl("round-moves");resultEl=this.getEl("round-result");moveChoicesEl=this.getEl("choices");taraBtn=this.getEl("tara");startBtn=this.getEl("start");playAgainBtn=this.getEl("play-again");gameStatsEl=this.getEl("game-stats");getEl(t){return document.getElementById(t)}toggle(t,e){t&&t.classList.toggle("hidden",!e)}updateMessage(t){this.messageEl&&(this.messageEl.textContent=t)}toggleOverlay(t){this.toggle(this.overlay,t)}toggleControls(t){this.toggle(this.controls,t)}toggleMoveButtons(t){this.toggle(this.moveChoicesEl,t)}togglePlayAgain(t){this.toggle(this.playAgainBtn,t)}toggleGameStats(t){this.toggle(this.gameStatsEl,t)}updateRound(t){this.roundEl&&(this.roundEl.textContent=`Round ${t}`,this.toggle(this.roundEl,!0))}updateMatch(t){this.matchEl&&(this.matchEl.textContent=`Match ${t}`,this.toggle(this.matchEl,!0))}resetForNextRound(){this.toggleGameStats(!0),this.toggleMoveButtons(!0),this.togglePlayAgain(!1),this.toggle(this.outcomeEl,!1)}updateStartButton(t){this.startBtn&&(this.startBtn.textContent=t?"Resume Match":"Start Match")}updatePlayAgainButton(t){this.playAgainBtn&&(this.playAgainBtn.textContent=t?"Start New Match":"Next Round")}activateSpinner(t){this.toggleOverlay(t)}showOutcomeText(t,e,o){this.outcomeEl&&this.movesEl&&this.resultEl&&(this.movesEl.textContent=`You played ${t}. Computer played ${e}.`,this.resultEl.textContent=o,this.toggle(this.outcomeEl,!0))}showRoundOutcome(t,e,o){this.showOutcomeText(t,e,o.toUpperCase())}showMatchOutcome(t,e,o){this.showOutcomeText(t,e,`${o.toUpperCase()} WON THE MATCH!`)}updateScores(t,e){this.playerScoreEl&&this.computerScoreEl&&(this.playerScoreEl.textContent=t.toString(),this.computerScoreEl.textContent=e.toString())}updateTaraCounts(t,e){this.playerTaraCountEl&&this.computerTaraCountEl&&(this.playerTaraCountEl.textContent=t.toString(),this.computerTaraCountEl.textContent=e.toString())}updateTaraButton(t,e){this.taraBtn&&(this.taraBtn.disabled=!t,this.taraBtn.textContent=`Tara (x${e})`)}updateMostCommonMoves(t,e){this.playerMostCommonMoveEl&&this.computerMostCommonMoveEl&&(this.playerMostCommonMoveEl.textContent=t??"N/A",this.computerMostCommonMoveEl.textContent=e??"N/A")}updateHealth(t,e){this.playerHealthEl&&this.computerHealthEl&&(this.playerHealthEl.textContent=(t??0).toString(),this.computerHealthEl.textContent=(e??0).toString())}getHealthBar(t){return"player"===t?this.playerHealthBarEl:this.computerHealthBarEl}updateHealthBar(t,e){let o=this.getHealthBar(t);if(o)switch(o.className="bar",e){case 100:o.classList.add("full");break;case 50:o.classList.add("half");break;case 0:case null:o.classList.add("zero")}}}class R{model;view;constructor(t,e){this.model=t,this.view=e}updateScoreView(){this.view.updateScores(this.model.getPlayerScore(),this.model.getComputerScore())}updateTaraView(){this.view.updateTaraCounts(this.model.getPlayerTaraCount(),this.model.getComputerTaraCount())}updateMostCommonMoveView(){this.view.updateMostCommonMoves(this.model.getPlayerMostCommonMove(),this.model.getComputerMostCommonMove())}updateHealthView(){let e=this.model.getHealth(t.PLAYER),o=this.model.getHealth(t.COMPUTER);this.view.updateHealth(e,o),this.view.updateHealthBar(t.PLAYER,e),this.view.updateHealthBar(t.COMPUTER,o)}updateTaraButtonView(){let t=this.model.taraIsEnabled(),e=this.model.getPlayerTaraCount();this.view.updateTaraButton(t,e)}startGame(){let t=this.model.getRoundNumber(),e=this.model.getMatchNumber();this.model.setDefaultMatchData(),this.view.updateRound(t),this.view.updateMatch(e),this.view.toggleControls(!1),this.view.toggleGameStats(!0),this.view.toggleMoveButtons(!0),this.updateHealthView()}endRound(){let t=this.model.getPlayerMove(),e=this.model.getComputerMove(),o=this.model.evaluateRound(),a=this.model.isMatchOver();if(this.updateHealthView(),a){let o=this.model.handleMatchWin();this.view.showMatchOutcome(t,e,o),this.model.incrementMatchNumber(),this.model.setMatch(null)}else this.view.showRoundOutcome(t,e,o),this.model.increaseRoundNumber();this.updateScoreView(),this.updateTaraView(),this.updateMostCommonMoveView(),this.updateTaraButtonView(),this.view.updatePlayAgainButton(a),this.view.togglePlayAgain(!0)}handleNextRound(){this.model.setDefaultMatchData();let t=this.model.getRoundNumber(),e=this.model.getMatchNumber();this.updateHealthView(),this.view.updateRound(t),this.view.updateMatch(e),this.view.resetForNextRound()}waitForTimeout(t){return new Promise(e=>setTimeout(e,t))}async resetGameState(){this.view.activateSpinner(!0),this.model.resetScores(),this.model.resetMoves(),this.model.resetTaras(),this.model.resetHistories(),this.model.resetBothMoveCounts(),this.model.resetMostCommonMoves(),this.model.resetMatchData(),this.updateScoreView(),this.updateTaraView(),this.updateHealthView(),this.updateMostCommonMoveView(),this.updateTaraButtonView();let t=this.model.isMatchActive();this.view.updateStartButton(t),await this.waitForTimeout(250),this.view.activateSpinner(!1)}async handlePlayerMove(t){this.view.activateSpinner(!0),this.view.toggleMoveButtons(!1),this.model.resetMoves(),this.model.registerPlayerMove(t),this.model.chooseComputerMove(),await this.waitForTimeout(500),this.view.activateSpinner(!1),await this.waitForTimeout(250),this.endRound()}async initialize(){let t=this.model.isMatchActive();this.updateScoreView(),this.updateTaraView(),this.updateMostCommonMoveView(),this.updateTaraButtonView(),await this.waitForTimeout(500),this.view.updateMessage("Rock, Paper, Scissors, Tara"),this.view.activateSpinner(!1),this.view.updateStartButton(t),this.view.toggleGameStats(!1),this.view.toggleMoveButtons(!1),this.view.togglePlayAgain(!1),this.view.toggleControls(!0),document.getElementById("start")?.addEventListener("click",()=>this.startGame()),document.getElementById("play-again")?.addEventListener("click",()=>this.handleNextRound()),Object.values(s).forEach(t=>{document.getElementById(t)?.addEventListener("click",()=>this.handlePlayerMove(t))}),document.getElementById("reset-game-state")?.addEventListener("click",()=>this.resetGameState())}}document.addEventListener("DOMContentLoaded",()=>{new R(new S,new E).initialize()});
//# sourceMappingURL=public.368db3ff.js.map
