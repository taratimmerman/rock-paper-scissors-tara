{"mappings":"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","sources":["<anon>","src/index.ts","src/model/model.ts","../src/model/model.ts","src/utils/dataUtils.ts","../src/utils/dataUtils.ts","src/storage/localStorageGameStorage.ts","../src/storage/localStorageGameStorage.ts","src/view.ts","src/controller/controller.ts","../src/controller/controller.ts"],"sourcesContent":["const $71f329d8a7c8539f$export$10aaa7122e2cf6d6 = {\n    PLAYER: \"player\",\n    COMPUTER: \"computer\"\n};\nconst $71f329d8a7c8539f$export$739b0bbd051f0af9 = 1;\nconst $71f329d8a7c8539f$export$433f561606f01359 = 100;\nconst $71f329d8a7c8539f$export$a2f266d65df4040e = 50;\nconst $71f329d8a7c8539f$export$db626523f766475b = 1;\nconst $71f329d8a7c8539f$export$2de13e891a662beb = {\n    matchRoundNumber: $71f329d8a7c8539f$export$739b0bbd051f0af9,\n    playerHealth: $71f329d8a7c8539f$export$433f561606f01359,\n    computerHealth: $71f329d8a7c8539f$export$433f561606f01359\n};\nconst $71f329d8a7c8539f$export$3528b598622357c7 = {\n    player: \"playerHealth\",\n    computer: \"computerHealth\"\n};\nconst $71f329d8a7c8539f$export$67f072146e5978c8 = {\n    ROCK: \"rock\",\n    PAPER: \"paper\",\n    SCISSORS: \"scissors\",\n    TARA: \"tara\"\n};\nconst $71f329d8a7c8539f$export$97019d86eac04150 = [\n    {\n        name: $71f329d8a7c8539f$export$67f072146e5978c8.ROCK,\n        beats: [\n            $71f329d8a7c8539f$export$67f072146e5978c8.SCISSORS\n        ]\n    },\n    {\n        name: $71f329d8a7c8539f$export$67f072146e5978c8.PAPER,\n        beats: [\n            $71f329d8a7c8539f$export$67f072146e5978c8.ROCK\n        ]\n    },\n    {\n        name: $71f329d8a7c8539f$export$67f072146e5978c8.SCISSORS,\n        beats: [\n            $71f329d8a7c8539f$export$67f072146e5978c8.PAPER\n        ]\n    },\n    {\n        name: $71f329d8a7c8539f$export$67f072146e5978c8.TARA,\n        beats: [\n            $71f329d8a7c8539f$export$67f072146e5978c8.ROCK,\n            $71f329d8a7c8539f$export$67f072146e5978c8.PAPER,\n            $71f329d8a7c8539f$export$67f072146e5978c8.SCISSORS\n        ]\n    }\n];\nconst $71f329d8a7c8539f$export$31531e938145c246 = $71f329d8a7c8539f$export$97019d86eac04150.map((data)=>data.name);\nconst $71f329d8a7c8539f$export$f1cdc934597ad339 = new Map($71f329d8a7c8539f$export$97019d86eac04150.map((move)=>[\n        move.name,\n        move\n    ]));\nconst $71f329d8a7c8539f$export$e004b108e63e350d = $71f329d8a7c8539f$export$97019d86eac04150.filter((move)=>move.name !== $71f329d8a7c8539f$export$67f072146e5978c8.TARA);\nconst $71f329d8a7c8539f$export$11a493a8727aac2a = $71f329d8a7c8539f$export$e004b108e63e350d.map((data)=>data.name);\nconst $71f329d8a7c8539f$export$6f13edb1b9fe199d = new Map($71f329d8a7c8539f$export$e004b108e63e350d.map((move)=>[\n        move.name,\n        move\n    ]));\n\n\n\nconst $dc0137b9424d8dd1$var$KEY_SUFFIX_SCORE = \"Score\";\nconst $dc0137b9424d8dd1$var$KEY_SUFFIX_TARA_COUNT = \"TaraCount\";\nconst $dc0137b9424d8dd1$var$KEY_SUFFIX_MOST_COMMON_MOVE = \"MostCommonMove\";\nconst $dc0137b9424d8dd1$var$KEY_SUFFIX_MOVE_COUNTS = \"MoveCounts\";\nconst $dc0137b9424d8dd1$var$KEY_SUFFIX_HISTORY = \"History\";\nconst $dc0137b9424d8dd1$var$KEY_ROUND_NUMBER = \"roundNumber\";\nconst $dc0137b9424d8dd1$var$KEY_GLOBAL_MATCH_NUMBER = \"globalMatchNumber\";\nconst $dc0137b9424d8dd1$var$KEY_CURRENT_MATCH = \"currentMatch\";\nconst $dc0137b9424d8dd1$var$DEFAULT_NUMERIC_VALUE = 0;\nconst $dc0137b9424d8dd1$var$DEFAULT_MOVE_COUNTS = {\n    [(0, $71f329d8a7c8539f$export$67f072146e5978c8).ROCK]: 0,\n    [(0, $71f329d8a7c8539f$export$67f072146e5978c8).PAPER]: 0,\n    [(0, $71f329d8a7c8539f$export$67f072146e5978c8).SCISSORS]: 0\n};\nclass $dc0137b9424d8dd1$export$77bd854ea05fa7f7 {\n    formatKey(participant, suffix) {\n        return `${participant}${suffix}`;\n    }\n    safelySetItem(key, value) {\n        try {\n            localStorage.setItem(key, value);\n        } catch (e) {\n            console.warn(`LocalStorage Error: Failed to save \"${key}\".`, e);\n        }\n    }\n    // ===== Getters =====\n    getScore(participant) {\n        const key = this.formatKey(participant, $dc0137b9424d8dd1$var$KEY_SUFFIX_SCORE);\n        return parseInt(localStorage.getItem(key) || $dc0137b9424d8dd1$var$DEFAULT_NUMERIC_VALUE.toString(), 10);\n    }\n    getTaraCount(participant) {\n        const key = this.formatKey(participant, $dc0137b9424d8dd1$var$KEY_SUFFIX_TARA_COUNT);\n        return parseInt(localStorage.getItem(key) || $dc0137b9424d8dd1$var$DEFAULT_NUMERIC_VALUE.toString(), 10);\n    }\n    getMostCommonMove(participant) {\n        const key = this.formatKey(participant, $dc0137b9424d8dd1$var$KEY_SUFFIX_MOST_COMMON_MOVE);\n        const move = localStorage.getItem(key);\n        return move && (0, $71f329d8a7c8539f$export$11a493a8727aac2a).includes(move) ? move : null;\n    }\n    getMoveCounts(participant) {\n        const key = this.formatKey(participant, $dc0137b9424d8dd1$var$KEY_SUFFIX_MOVE_COUNTS);\n        try {\n            const raw = localStorage.getItem(key);\n            return raw ? JSON.parse(raw) : $dc0137b9424d8dd1$var$DEFAULT_MOVE_COUNTS;\n        } catch (e) {\n            console.warn(`LocalStorage Error: Failed to parse \"${key}\".`, e);\n            return $dc0137b9424d8dd1$var$DEFAULT_MOVE_COUNTS;\n        }\n    }\n    getGlobalMatchNumber() {\n        const stored = localStorage.getItem($dc0137b9424d8dd1$var$KEY_GLOBAL_MATCH_NUMBER);\n        return stored !== null ? parseInt(stored, 10) : null;\n    }\n    getMatch() {\n        try {\n            const raw = localStorage.getItem($dc0137b9424d8dd1$var$KEY_CURRENT_MATCH);\n            return raw ? JSON.parse(raw) : null;\n        } catch (e) {\n            console.warn(`LocalStorage Error: Failed to parse currentMatch.`, e);\n            return null;\n        }\n    }\n    getOldGlobalRoundNumber() {\n        const roundString = localStorage.getItem($dc0137b9424d8dd1$var$KEY_ROUND_NUMBER);\n        // If the item doesn't exist in localStorage, getItem returns null.\n        if (roundString === null) return null;\n        // Attempt to parse the string to an integer.\n        const parsedRound = parseInt(roundString, 10);\n        // Check if parsing resulted in NaN (Not a Number), meaning the stored value was invalid.\n        if (isNaN(parsedRound)) {\n            console.warn(`Legacy 'roundNumber' in localStorage (${roundString}) is not a valid number. Skipping migration.`);\n            return null; // Treat invalid data as if it doesn't exist for migration purposes\n        }\n        return parsedRound;\n    }\n    // ===== Setters =====\n    setScore(participant, score) {\n        const key = this.formatKey(participant, $dc0137b9424d8dd1$var$KEY_SUFFIX_SCORE);\n        this.safelySetItem(key, score.toString());\n    }\n    setTaraCount(participant, count) {\n        const key = this.formatKey(participant, $dc0137b9424d8dd1$var$KEY_SUFFIX_TARA_COUNT);\n        this.safelySetItem(key, count.toString());\n    }\n    setMostCommonMove(participant, move) {\n        const key = this.formatKey(participant, $dc0137b9424d8dd1$var$KEY_SUFFIX_MOST_COMMON_MOVE);\n        if (move) this.safelySetItem(key, move);\n        else localStorage.removeItem(key);\n    }\n    setMoveCounts(participant, moveCounts) {\n        const key = this.formatKey(participant, $dc0137b9424d8dd1$var$KEY_SUFFIX_MOVE_COUNTS);\n        this.safelySetItem(key, JSON.stringify(moveCounts));\n    }\n    setGlobalMatchNumber(matchNumber) {\n        if (matchNumber) this.safelySetItem($dc0137b9424d8dd1$var$KEY_GLOBAL_MATCH_NUMBER, matchNumber.toString());\n        else localStorage.removeItem($dc0137b9424d8dd1$var$KEY_GLOBAL_MATCH_NUMBER);\n    }\n    setMatch(match) {\n        if (match) this.safelySetItem($dc0137b9424d8dd1$var$KEY_CURRENT_MATCH, JSON.stringify(match));\n        else localStorage.removeItem($dc0137b9424d8dd1$var$KEY_CURRENT_MATCH);\n    }\n    // ===== Removers =====\n    removeScore(participant) {\n        const key = this.formatKey(participant, $dc0137b9424d8dd1$var$KEY_SUFFIX_SCORE);\n        localStorage.removeItem(key);\n    }\n    removeTaraCount(participant) {\n        const key = this.formatKey(participant, $dc0137b9424d8dd1$var$KEY_SUFFIX_TARA_COUNT);\n        localStorage.removeItem(key);\n    }\n    removeMostCommonMove(participant) {\n        const key = this.formatKey(participant, $dc0137b9424d8dd1$var$KEY_SUFFIX_MOST_COMMON_MOVE);\n        localStorage.removeItem(key);\n    }\n    removeMoveCounts(participant) {\n        const key = this.formatKey(participant, $dc0137b9424d8dd1$var$KEY_SUFFIX_MOVE_COUNTS);\n        localStorage.removeItem(key);\n    }\n    removeHistory(participant) {\n        const key = this.formatKey(participant, $dc0137b9424d8dd1$var$KEY_SUFFIX_HISTORY);\n        localStorage.removeItem(key);\n    }\n    removeGlobalMatchNumber() {\n        localStorage.removeItem($dc0137b9424d8dd1$var$KEY_GLOBAL_MATCH_NUMBER);\n    }\n    removeOldGlobalRoundNumber() {\n        localStorage.removeItem($dc0137b9424d8dd1$var$KEY_ROUND_NUMBER);\n    }\n}\n\n\nclass $98c16915bb808846$export$a1edc412be3e1841 {\n    state = {\n        scores: {\n            player: 0,\n            computer: 0\n        },\n        moves: {\n            player: null,\n            computer: null\n        },\n        taras: {\n            player: 0,\n            computer: 0\n        },\n        mostCommonMove: {\n            player: null,\n            computer: null\n        },\n        moveCounts: {\n            player: {\n                rock: 0,\n                paper: 0,\n                scissors: 0\n            },\n            computer: {\n                rock: 0,\n                paper: 0,\n                scissors: 0\n            }\n        },\n        globalMatchNumber: null,\n        currentMatch: null\n    };\n    gameStorage;\n    constructor(gameStorage = new (0, $dc0137b9424d8dd1$export$77bd854ea05fa7f7)()){\n        this.gameStorage = gameStorage;\n        this.state.scores.player = this.gameStorage.getScore((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER);\n        this.state.scores.computer = this.gameStorage.getScore((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).COMPUTER);\n        this.state.taras.player = this.gameStorage.getTaraCount((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER);\n        this.state.taras.computer = this.gameStorage.getTaraCount((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).COMPUTER);\n        this.state.mostCommonMove.player = this.gameStorage.getMostCommonMove((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER);\n        this.state.mostCommonMove.computer = this.gameStorage.getMostCommonMove((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).COMPUTER);\n        this.state.moveCounts.player = this.gameStorage.getMoveCounts((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER);\n        this.state.moveCounts.computer = this.gameStorage.getMoveCounts((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).COMPUTER);\n        this._loadOrMigrateMatchState();\n    }\n    // ===== General Methods =====\n    doesMoveBeat(a, b) {\n        return (0, $71f329d8a7c8539f$export$f1cdc934597ad339).get(a)?.beats.includes(b) ?? false;\n    }\n    handleRoundWin(winner, winningMove) {\n        if (this.isStandardMove(winningMove)) {\n            const currentTara = this.getTaraCount(winner);\n            if (currentTara < 3) this.setTaraCount(winner, currentTara + 1);\n        }\n    }\n    evaluateRound() {\n        const playerMove = this.getPlayerMove();\n        const computerMove = this.getComputerMove();\n        if (playerMove === null || computerMove === null) return \"Invalid round\";\n        this.handleTaraMove((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER, playerMove);\n        this.handleTaraMove((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).COMPUTER, computerMove);\n        if (playerMove === computerMove) return \"It's a tie!\";\n        if (this.doesMoveBeat(playerMove, computerMove)) {\n            this.handleRoundWin((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER, playerMove);\n            this.decrementHealth((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).COMPUTER);\n            return \"You win the round!\";\n        } else {\n            this.handleRoundWin((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).COMPUTER, computerMove);\n            this.decrementHealth((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER);\n            return \"Computer wins the round!\";\n        }\n    }\n    isMatchActive() {\n        return this.gameStorage.getMatch() !== null;\n    }\n    // ===== Score Methods =====\n    setScore(key, value) {\n        this.state.scores[key] = value;\n        this.gameStorage.setScore(key, value);\n    }\n    getScore(key) {\n        return this.state.scores[key];\n    }\n    resetScore(key) {\n        this.state.scores[key] = 0;\n        this.gameStorage.removeScore(key);\n    }\n    setPlayerScore(score) {\n        this.setScore((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER, score);\n    }\n    setComputerScore(score) {\n        this.setScore((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).COMPUTER, score);\n    }\n    getPlayerScore() {\n        return this.getScore((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER);\n    }\n    getComputerScore() {\n        return this.getScore((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).COMPUTER);\n    }\n    resetScores() {\n        this.resetScore((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER);\n        this.resetScore((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).COMPUTER);\n    }\n    // ===== Move Methods =====\n    isStandardMove(value) {\n        return typeof value === \"string\" && value !== (0, $71f329d8a7c8539f$export$67f072146e5978c8).TARA;\n    }\n    setMove(key, move) {\n        this.state.moves[key] = move;\n    }\n    getMove(key) {\n        return this.state.moves[key];\n    }\n    determineMostCommonMove(moveCounts) {\n        let mostCommonMove = null;\n        let highestCount = 0;\n        let hasMoveFrequencyTie = false;\n        for (const [move, count] of Object.entries(moveCounts)){\n            if (count > highestCount) {\n                highestCount = count;\n                mostCommonMove = move;\n                hasMoveFrequencyTie = false;\n            } else if (count === highestCount && count !== 0) hasMoveFrequencyTie = true;\n        }\n        return hasMoveFrequencyTie ? null : mostCommonMove;\n    }\n    resetMostCommonMove(key) {\n        this.state.mostCommonMove[key] = null;\n        this.gameStorage.removeMostCommonMove(key);\n    }\n    setMostCommonMove(key, moveCounts) {\n        const mostCommonMove = this.determineMostCommonMove(moveCounts);\n        this.state.mostCommonMove[key] = mostCommonMove;\n        this.gameStorage.setMostCommonMove(key, mostCommonMove);\n    }\n    getMostCommonMove(key) {\n        return this.state.mostCommonMove[key];\n    }\n    getAvailableMoves(hasTara) {\n        if (hasTara) return 0, $71f329d8a7c8539f$export$31531e938145c246;\n        else return 0, $71f329d8a7c8539f$export$11a493a8727aac2a;\n    }\n    getBaseWeights() {\n        return {\n            [(0, $71f329d8a7c8539f$export$67f072146e5978c8).ROCK]: 1,\n            [(0, $71f329d8a7c8539f$export$67f072146e5978c8).PAPER]: 1,\n            [(0, $71f329d8a7c8539f$export$67f072146e5978c8).SCISSORS]: 1,\n            [(0, $71f329d8a7c8539f$export$67f072146e5978c8).TARA]: 0\n        };\n    }\n    getTaraWeight(moves) {\n        if (!moves.includes((0, $71f329d8a7c8539f$export$67f072146e5978c8).TARA)) return null;\n        const { player: player, computer: computer } = this.state.scores;\n        const scoreDiff = player - computer;\n        if (scoreDiff > 0) return Math.min(3 + scoreDiff, 10);\n        if (scoreDiff < 0) return 1;\n        return 2;\n    }\n    getStandardMoveWeights() {\n        const weights = {\n            [(0, $71f329d8a7c8539f$export$67f072146e5978c8).ROCK]: 1,\n            [(0, $71f329d8a7c8539f$export$67f072146e5978c8).PAPER]: 1,\n            [(0, $71f329d8a7c8539f$export$67f072146e5978c8).SCISSORS]: 1\n        };\n        const mostCommon = this.state.mostCommonMove.player;\n        if (!mostCommon) return weights;\n        const counterMap = {\n            [(0, $71f329d8a7c8539f$export$67f072146e5978c8).ROCK]: (0, $71f329d8a7c8539f$export$67f072146e5978c8).PAPER,\n            [(0, $71f329d8a7c8539f$export$67f072146e5978c8).PAPER]: (0, $71f329d8a7c8539f$export$67f072146e5978c8).SCISSORS,\n            [(0, $71f329d8a7c8539f$export$67f072146e5978c8).SCISSORS]: (0, $71f329d8a7c8539f$export$67f072146e5978c8).ROCK\n        };\n        const counter = counterMap[mostCommon];\n        return {\n            [(0, $71f329d8a7c8539f$export$67f072146e5978c8).ROCK]: counter === (0, $71f329d8a7c8539f$export$67f072146e5978c8).ROCK ? 5 : 2,\n            [(0, $71f329d8a7c8539f$export$67f072146e5978c8).PAPER]: counter === (0, $71f329d8a7c8539f$export$67f072146e5978c8).PAPER ? 5 : 2,\n            [(0, $71f329d8a7c8539f$export$67f072146e5978c8).SCISSORS]: counter === (0, $71f329d8a7c8539f$export$67f072146e5978c8).SCISSORS ? 5 : 2\n        };\n    }\n    chooseWeightedRandomMove(moves, weights) {\n        const weightedPool = moves.flatMap((move)=>Array(weights[move]).fill(move));\n        const randomIndex = Math.floor(Math.random() * weightedPool.length);\n        return weightedPool[randomIndex];\n    }\n    getComputerMoveWeights(moves) {\n        const baseWeights = this.getBaseWeights();\n        const taraWeight = this.getTaraWeight(moves);\n        const standardWeights = this.getStandardMoveWeights();\n        return {\n            ...baseWeights,\n            ...standardWeights,\n            ...taraWeight !== null ? {\n                [(0, $71f329d8a7c8539f$export$67f072146e5978c8).TARA]: taraWeight\n            } : {}\n        };\n    }\n    getWeightedComputerMove() {\n        const hasTara = this.getComputerTaraCount() > 0;\n        const availableMoves = this.getAvailableMoves(hasTara);\n        const weights = this.getComputerMoveWeights(availableMoves);\n        return this.chooseWeightedRandomMove(availableMoves, weights);\n    }\n    setPlayerMove(move) {\n        this.setMove((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER, move);\n    }\n    getPlayerMove() {\n        return this.getMove((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER);\n    }\n    setComputerMove(move) {\n        this.setMove((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).COMPUTER, move);\n    }\n    getComputerMove() {\n        return this.getMove((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).COMPUTER);\n    }\n    resetMoves() {\n        this.setPlayerMove(null);\n        this.setComputerMove(null);\n    }\n    chooseComputerMove() {\n        const move = this.getWeightedComputerMove();\n        this.registerComputerMove(move);\n    }\n    registerPlayerMove(move) {\n        this.setPlayerMove(move);\n        if (this.isStandardMove(move)) {\n            this.setMoveCounts((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER, move);\n            this.setPlayerMostCommonMove();\n        }\n    }\n    registerComputerMove(move) {\n        this.setComputerMove(move);\n        if (this.isStandardMove(move)) {\n            this.setMoveCounts((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).COMPUTER, move);\n            this.setComputerMostCommonMove();\n        }\n    }\n    setPlayerMostCommonMove() {\n        const moveCounts = this.getMoveCounts((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER);\n        this.setMostCommonMove((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER, moveCounts);\n    }\n    setComputerMostCommonMove() {\n        const moveCounts = this.getMoveCounts((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).COMPUTER);\n        this.setMostCommonMove((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).COMPUTER, moveCounts);\n    }\n    resetMostCommonMoves() {\n        this.resetMostCommonMove((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER);\n        this.resetMostCommonMove((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).COMPUTER);\n    }\n    getPlayerMostCommonMove() {\n        return this.getMostCommonMove((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER);\n    }\n    getComputerMostCommonMove() {\n        return this.getMostCommonMove((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).COMPUTER);\n    }\n    setMoveCounts(key, move) {\n        this.state.moveCounts[key][move] = (this.state.moveCounts[key][move] || 0) + 1;\n        this.gameStorage.setMoveCounts(key, this.state.moveCounts[key]);\n    }\n    resetMoveCounts(key) {\n        this.state.moveCounts[key] = {\n            rock: 0,\n            paper: 0,\n            scissors: 0\n        };\n        this.gameStorage.removeMoveCounts(key);\n    }\n    getMoveCounts(key) {\n        return this.state.moveCounts[key];\n    }\n    resetBothMoveCounts() {\n        this.resetMoveCounts((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER);\n        this.resetMoveCounts((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).COMPUTER);\n    }\n    showMostCommonMove() {\n        return this.getPlayerMostCommonMove() !== null || this.getComputerMostCommonMove() !== null;\n    }\n    resetHistory(key) {\n        this.gameStorage.removeHistory(key);\n    }\n    resetHistories() {\n        this.resetHistory((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER);\n        this.resetHistory((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).COMPUTER);\n    }\n    // ===== Round Methods =====\n    getRoundNumber() {\n        return this.state.currentMatch?.matchRoundNumber ?? 1;\n    }\n    setRoundNumber(value) {\n        if (!this.state.currentMatch) return;\n        this.state.currentMatch.matchRoundNumber = value;\n        this.gameStorage.setMatch(this.state.currentMatch);\n    }\n    increaseRoundNumber() {\n        const current = this.getRoundNumber();\n        this.setRoundNumber(current + 1);\n    }\n    // ===== Tara Methods =====\n    decrementTaraCount(key) {\n        const current = this.getTaraCount(key);\n        if (current > 1) this.setTaraCount(key, current - 1);\n        else if (current === 1) this.resetTaraCount(key);\n    }\n    handleTaraMove(key, move) {\n        if (move === (0, $71f329d8a7c8539f$export$67f072146e5978c8).TARA) {\n            const currentTara = this.getTaraCount(key);\n            if (currentTara > 0) this.decrementTaraCount(key);\n            else this.setMove(key, (0, $71f329d8a7c8539f$export$67f072146e5978c8).ROCK);\n        }\n    }\n    setTaraCount(key, value) {\n        this.state.taras[key] = value;\n        this.gameStorage.setTaraCount(key, value);\n    }\n    getTaraCount(key) {\n        return this.state.taras[key];\n    }\n    resetTaraCount(key) {\n        this.state.taras[key] = 0;\n        this.gameStorage.removeTaraCount(key);\n    }\n    setPlayerTaraCount(count) {\n        this.setTaraCount((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER, count);\n    }\n    setComputerTaraCount(count) {\n        this.setTaraCount((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).COMPUTER, count);\n    }\n    resetTaras() {\n        this.resetTaraCount((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER);\n        this.resetTaraCount((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).COMPUTER);\n    }\n    getPlayerTaraCount() {\n        return this.getTaraCount((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER);\n    }\n    getComputerTaraCount() {\n        return this.getTaraCount((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).COMPUTER);\n    }\n    taraIsEnabled() {\n        return this.getTaraCount((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER) > 0;\n    }\n    // ===== Match Methods =====\n    handleMatchWin() {\n        const winner = this.getMatchWinner();\n        this.setScore(winner, this.getScore(winner) + 1);\n        return winner;\n    }\n    setMatch(match) {\n        this.state.currentMatch = match;\n        this.gameStorage.setMatch(match);\n    }\n    setMatchNumber(matchNumber) {\n        this.state.globalMatchNumber = matchNumber;\n        this.gameStorage.setGlobalMatchNumber(matchNumber);\n    }\n    /**\n     * Sets default match data if no match is currently active.\n     *\n     * Used as a fallback when no match data is loaded (e.g., from `_loadOrMigrateMatchState()`).\n     * Does not overwrite existing match state.\n     */ setDefaultMatchData() {\n        const isMatchActive = this.isMatchActive();\n        if (!isMatchActive) this.setMatch({\n            ...(0, $71f329d8a7c8539f$export$2de13e891a662beb)\n        });\n    }\n    resetMatchData() {\n        this.state.currentMatch = null;\n        this.gameStorage.setMatch(null);\n        this.setMatchNumber(null);\n    }\n    getMatchNumber() {\n        return this.state.globalMatchNumber ?? 1;\n    }\n    isMatchOver() {\n        return this.isDefeated((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER) || this.isDefeated((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).COMPUTER);\n    }\n    getMatchWinner() {\n        if (this.isDefeated((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER)) return (0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).COMPUTER;\n        else return (0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER;\n    }\n    incrementMatchNumber() {\n        const currentMatchNumber = this.getMatchNumber();\n        this.setMatchNumber(currentMatchNumber + 1);\n    }\n    /**\n     * Initializes the game state based on available storage.\n     *\n     * This method is called during Model construction. It checks for:\n     * - A valid saved match (loads it and skips migration),\n     * - An old-format global round number (migrates it into a new match),\n     * - Or no valid data (leaves currentMatch unset).\n     *\n     * It also ensures the global match number is set appropriately.\n     */ _loadOrMigrateMatchState() {\n        if (this.isMatchActive()) {\n            this._loadExistingMatchState();\n            return;\n        }\n        const oldGlobalRoundNumber = this.gameStorage.getOldGlobalRoundNumber();\n        if (oldGlobalRoundNumber !== null && oldGlobalRoundNumber > 0) this._migrateOldData(oldGlobalRoundNumber);\n    // Otherwise: no migration, and no existing match — do nothing.\n    }\n    /**\n     * Loads state for an existing match stored in the new format.\n     */ _loadExistingMatchState() {\n        this.state.globalMatchNumber = this.gameStorage.getGlobalMatchNumber();\n        this.state.currentMatch = this.gameStorage.getMatch();\n    }\n    /**\n     * Migrates match state from an older game version to the current format.\n     *\n     * @param oldRoundNumber - The round number from the old game format.\n     */ _migrateOldData(oldRoundNumber) {\n        const migratedMatch = {\n            matchRoundNumber: oldRoundNumber,\n            playerHealth: (0, $71f329d8a7c8539f$export$433f561606f01359),\n            computerHealth: (0, $71f329d8a7c8539f$export$433f561606f01359),\n            initialHealth: (0, $71f329d8a7c8539f$export$433f561606f01359),\n            damagePerLoss: (0, $71f329d8a7c8539f$export$a2f266d65df4040e)\n        };\n        this.setMatch(migratedMatch);\n        this.gameStorage.removeOldGlobalRoundNumber();\n        this.state.globalMatchNumber = 1;\n        this.gameStorage.setGlobalMatchNumber(this.state.globalMatchNumber);\n    }\n    // ===== Health Methods =====\n    getHealthKey(participant) {\n        return (0, $71f329d8a7c8539f$export$3528b598622357c7)[participant];\n    }\n    getHealth(participant) {\n        const match = this.state.currentMatch;\n        if (!match) return null;\n        const key = this.getHealthKey(participant);\n        return match[key];\n    }\n    decrementHealth(participant) {\n        const match = this.state.currentMatch;\n        if (!match) return false;\n        const key = this.getHealthKey(participant);\n        const currentHealth = match[key];\n        if (currentHealth <= 0) return false;\n        match[key] = Math.max(0, currentHealth - (0, $71f329d8a7c8539f$export$a2f266d65df4040e));\n        return true;\n    }\n    isDefeated(participant) {\n        const health = this.getHealth(participant);\n        return health !== null && health <= 0;\n    }\n}\n\n\n\nclass $ffbecafb1344018e$export$27a5bd065ad55220 {\n    messageEl = document.getElementById(\"message\");\n    playerScoreEl = document.getElementById(\"player-score\");\n    computerScoreEl = document.getElementById(\"computer-score\");\n    playerHealthEl = document.getElementById(\"player-health\");\n    computerHealthEl = document.getElementById(\"computer-health\");\n    playerMostCommonMoveEl = document.getElementById(\"player-most-common-move\");\n    computerMostCommonMoveEl = document.getElementById(\"computer-most-common-move\");\n    movesEl = document.getElementById(\"round-moves\");\n    resultEl = document.getElementById(\"round-result\");\n    taraBtn = document.getElementById(\"tara\");\n    startBtn = document.getElementById(\"start\");\n    // ===== General Methods =====\n    updateMessage(text) {\n        if (this.messageEl) this.messageEl.textContent = text;\n    }\n    toggleStartButton(show) {\n        const btn = document.getElementById(\"start\");\n        if (btn) btn.style.display = show ? \"inline\" : \"none\";\n    }\n    updateRound(round) {\n        const roundElem = document.getElementById(\"round\");\n        if (roundElem) {\n            roundElem.textContent = `Round ${round}`;\n            roundElem.style.display = \"block\";\n        }\n    }\n    updateMatch(match) {\n        const matchElem = document.getElementById(\"match\");\n        if (matchElem) {\n            matchElem.textContent = `Match ${match}`;\n            matchElem.style.display = \"block\";\n        }\n    }\n    showRoundOutcome(playerMove, computerMove, result) {\n        this.movesEl.textContent = `You played ${playerMove}. Computer played ${computerMove}.`;\n        this.resultEl.textContent = result.toUpperCase();\n        this.movesEl.style.display = \"block\";\n        this.resultEl.style.display = \"block\";\n    }\n    showMatchOutcome(playerMove, computerMove, winner) {\n        this.movesEl.textContent = `You played ${playerMove}. Computer played ${computerMove}.`;\n        this.resultEl.textContent = `${winner.toUpperCase()} WON THE MATCH!`;\n        this.movesEl.style.display = \"block\";\n        this.resultEl.style.display = \"block\";\n    }\n    toggleResetGameState(show) {\n        const btn = document.getElementById(\"reset-game-state\");\n        if (btn) btn.style.display = show ? \"inline-block\" : \"none\";\n    }\n    toggleMoveButtons(show) {\n        Object.values((0, $71f329d8a7c8539f$export$67f072146e5978c8)).forEach((move)=>{\n            const btn = document.getElementById(move);\n            if (btn) btn.style.display = show ? \"inline\" : \"none\";\n        });\n    }\n    togglePlayAgain(show) {\n        const btn = document.getElementById(\"play-again\");\n        if (btn) btn.style.display = show ? \"inline-block\" : \"none\";\n    }\n    toggleMostCommonMoveTable(show) {\n        const table = document.getElementById(\"most-common-move-table\");\n        if (table) table.style.display = show ? \"table\" : \"none\";\n    }\n    resetForNextRound() {\n        this.toggleHealthTable(true);\n        this.toggleMostCommonMoveTable(true);\n        this.toggleMoveButtons(true);\n        this.togglePlayAgain(false);\n        this.movesEl.style.display = \"none\";\n        this.resultEl.style.display = \"none\";\n    }\n    updateStartButton(isMatchActive) {\n        if (this.startBtn && isMatchActive) this.startBtn.textContent = `Resume Match`;\n        else if (this.startBtn && !isMatchActive) this.startBtn.textContent = `Start Match`;\n    }\n    // ===== Score Methods =====\n    updateScores(player, computer) {\n        if (this.playerScoreEl) this.playerScoreEl.textContent = player.toString();\n        if (this.computerScoreEl) this.computerScoreEl.textContent = computer.toString();\n    }\n    // ===== Tara Methods =====\n    updateTaraCounts(playerCount, computerCount) {\n        document.getElementById(\"player-tara\").textContent = playerCount.toString();\n        document.getElementById(\"computer-tara\").textContent = computerCount.toString();\n    }\n    updateTaraButton(isEnabled, taraCount) {\n        if (this.taraBtn instanceof HTMLButtonElement) this.taraBtn.disabled = !isEnabled;\n        this.taraBtn.textContent = `Tara (x${taraCount})`;\n    }\n    // ===== History Methods =====\n    updateMostCommonMoves(player, computer) {\n        if (this.playerMostCommonMoveEl) this.playerMostCommonMoveEl.textContent = player ?? \"X\";\n        if (this.computerMostCommonMoveEl) this.computerMostCommonMoveEl.textContent = computer ?? \"X\";\n    }\n    // ===== Health Methods =====\n    updateHealth(playerHealth, computerHealth) {\n        this.playerHealthEl.textContent = (playerHealth ?? 0).toString();\n        this.computerHealthEl.textContent = (computerHealth ?? 0).toString();\n    }\n    toggleHealthTable(show) {\n        const table = document.getElementById(\"health-table\");\n        if (table) table.style.display = show ? \"table\" : \"none\";\n    }\n}\n\n\n\nclass $44521653474fa731$export$bd0bf19f25da8474 {\n    model;\n    view;\n    constructor(model, view){\n        this.model = model;\n        this.view = view;\n    }\n    updateScoreView() {\n        this.view.updateScores(this.model.getPlayerScore(), this.model.getComputerScore());\n    }\n    updateTaraView() {\n        this.view.updateTaraCounts(this.model.getPlayerTaraCount(), this.model.getComputerTaraCount());\n    }\n    updateMostCommonMoveView() {\n        this.view.updateMostCommonMoves(this.model.getPlayerMostCommonMove(), this.model.getComputerMostCommonMove());\n    }\n    updateHealthView() {\n        this.view.updateHealth(this.model.getHealth((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).PLAYER), this.model.getHealth((0, $71f329d8a7c8539f$export$10aaa7122e2cf6d6).COMPUTER));\n    }\n    updateTaraButtonView() {\n        const isEnabled = this.model.taraIsEnabled();\n        const taraCount = this.model.getPlayerTaraCount();\n        this.view.updateTaraButton(isEnabled, taraCount);\n    }\n    startGame() {\n        const roundNumber = this.model.getRoundNumber();\n        const matchNumber = this.model.getMatchNumber();\n        const showMostCommonMove = this.model.showMostCommonMove();\n        this.model.setDefaultMatchData();\n        this.view.updateRound(roundNumber);\n        this.view.updateMatch(matchNumber);\n        this.view.toggleStartButton(false);\n        this.view.toggleResetGameState(false);\n        this.view.toggleHealthTable(true);\n        this.view.toggleMostCommonMoveTable(showMostCommonMove);\n        this.view.toggleMoveButtons(true);\n        this.updateHealthView();\n    }\n    endRound() {\n        const playerMove = this.model.getPlayerMove();\n        const computerMove = this.model.getComputerMove();\n        const result = this.model.evaluateRound();\n        const isMatchOver = this.model.isMatchOver();\n        this.updateHealthView();\n        if (isMatchOver) {\n            const winner = this.model.handleMatchWin();\n            this.view.showMatchOutcome(playerMove, computerMove, winner);\n            this.model.incrementMatchNumber();\n            this.model.setMatch(null);\n        } else {\n            this.view.showRoundOutcome(playerMove, computerMove, result);\n            this.model.increaseRoundNumber();\n        }\n        this.view.toggleMostCommonMoveTable(false);\n        this.view.toggleMoveButtons(false);\n        this.view.togglePlayAgain(true);\n        this.updateScoreView();\n        this.updateTaraView();\n        this.updateMostCommonMoveView();\n        this.updateTaraButtonView();\n    }\n    handleNextRound() {\n        this.model.setDefaultMatchData();\n        const roundNumber = this.model.getRoundNumber();\n        const matchNumber = this.model.getMatchNumber();\n        this.updateHealthView();\n        this.view.updateRound(roundNumber);\n        this.view.updateMatch(matchNumber);\n        this.view.resetForNextRound();\n    }\n    resetGameState() {\n        this.model.resetScores();\n        this.model.resetMoves();\n        this.model.resetTaras();\n        this.model.resetHistories();\n        this.model.resetBothMoveCounts();\n        this.model.resetMostCommonMoves();\n        this.model.resetMatchData();\n        this.updateScoreView();\n        this.updateTaraView();\n        this.updateHealthView();\n        this.updateMostCommonMoveView();\n        this.updateTaraButtonView();\n        const isMatchActive = this.model.isMatchActive();\n        this.view.updateStartButton(isMatchActive);\n    }\n    handlePlayerMove(move) {\n        this.model.resetMoves();\n        this.model.registerPlayerMove(move);\n        this.model.chooseComputerMove();\n        this.endRound();\n    }\n    initialize() {\n        const isMatchActive = this.model.isMatchActive();\n        this.view.updateMessage(\"Rock, Paper, Scissors, Tara\");\n        this.updateScoreView();\n        this.updateTaraView();\n        this.updateMostCommonMoveView();\n        this.updateTaraButtonView();\n        this.view.updateStartButton(isMatchActive);\n        this.view.toggleHealthTable(false);\n        this.view.toggleMostCommonMoveTable(false);\n        this.view.toggleMoveButtons(false);\n        this.view.togglePlayAgain(false);\n        this.view.toggleStartButton(true);\n        document.getElementById(\"start\")?.addEventListener(\"click\", ()=>this.startGame());\n        document.getElementById(\"play-again\")?.addEventListener(\"click\", ()=>this.handleNextRound());\n        Object.values((0, $71f329d8a7c8539f$export$67f072146e5978c8)).forEach((move)=>{\n            document.getElementById(move)?.addEventListener(\"click\", ()=>this.handlePlayerMove(move));\n        });\n        document.getElementById(\"reset-game-state\")?.addEventListener(\"click\", ()=>this.resetGameState());\n    }\n}\n\n\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const model = new (0, $98c16915bb808846$export$a1edc412be3e1841)();\n    const view = new (0, $ffbecafb1344018e$export$27a5bd065ad55220)();\n    const controller = new (0, $44521653474fa731$export$bd0bf19f25da8474)(model, view);\n    controller.initialize();\n});\n\n\n//# sourceMappingURL=public.328cb7a1.js.map\n","import { Model } from \"./model/model\";\nimport { View } from \"./view\";\nimport { Controller } from \"./controller/controller\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const model = new Model();\n  const view = new View();\n  const controller = new Controller(model, view);\n\n  controller.initialize();\n});\n","import {\n  GameState,\n  Match,\n  Move,\n  MoveCount,\n  Participant,\n  StandardMove,\n} from \"../utils/dataObjectUtils\";\nimport {\n  ALL_MOVE_NAMES,\n  DAMAGE_PER_LOSS,\n  DEFAULT_MATCH,\n  HEALTH_KEYS,\n  INITIAL_HEALTH,\n  MOVES,\n  MOVE_DATA_MAP,\n  PARTICIPANTS,\n  STANDARD_MOVE_NAMES,\n} from \"../utils/dataUtils\";\nimport { IGameStorage } from \"../storage/gameStorage\";\nimport { LocalStorageGameStorage } from \"../storage/localStorageGameStorage\";\n\nexport class Model {\n  private state: GameState = {\n    scores: {\n      player: 0,\n      computer: 0,\n    },\n    moves: {\n      player: null,\n      computer: null,\n    },\n    taras: {\n      player: 0,\n      computer: 0,\n    },\n    mostCommonMove: {\n      player: null,\n      computer: null,\n    },\n    moveCounts: {\n      player: { rock: 0, paper: 0, scissors: 0 },\n      computer: { rock: 0, paper: 0, scissors: 0 },\n    },\n    globalMatchNumber: null,\n    currentMatch: null,\n  };\n  private gameStorage: IGameStorage;\n\n  constructor(gameStorage: IGameStorage = new LocalStorageGameStorage()) {\n    this.gameStorage = gameStorage;\n\n    this.state.scores.player = this.gameStorage.getScore(PARTICIPANTS.PLAYER);\n    this.state.scores.computer = this.gameStorage.getScore(\n      PARTICIPANTS.COMPUTER\n    );\n    this.state.taras.player = this.gameStorage.getTaraCount(\n      PARTICIPANTS.PLAYER\n    );\n    this.state.taras.computer = this.gameStorage.getTaraCount(\n      PARTICIPANTS.COMPUTER\n    );\n    this.state.mostCommonMove.player = this.gameStorage.getMostCommonMove(\n      PARTICIPANTS.PLAYER\n    );\n    this.state.mostCommonMove.computer = this.gameStorage.getMostCommonMove(\n      PARTICIPANTS.COMPUTER\n    );\n    this.state.moveCounts.player = this.gameStorage.getMoveCounts(\n      PARTICIPANTS.PLAYER\n    );\n    this.state.moveCounts.computer = this.gameStorage.getMoveCounts(\n      PARTICIPANTS.COMPUTER\n    );\n\n    this._loadOrMigrateMatchState();\n  }\n\n  // ===== General Methods =====\n\n  private doesMoveBeat(a: Move, b: Move): boolean {\n    return MOVE_DATA_MAP.get(a)?.beats.includes(b) ?? false;\n  }\n\n  private handleRoundWin(winner: Participant, winningMove: Move): void {\n    if (this.isStandardMove(winningMove)) {\n      const currentTara = this.getTaraCount(winner);\n      if (currentTara < 3) {\n        this.setTaraCount(winner, currentTara + 1);\n      }\n    }\n  }\n\n  evaluateRound(): string {\n    const playerMove = this.getPlayerMove();\n    const computerMove = this.getComputerMove();\n\n    if (playerMove === null || computerMove === null) return \"Invalid round\";\n\n    this.handleTaraMove(PARTICIPANTS.PLAYER, playerMove);\n    this.handleTaraMove(PARTICIPANTS.COMPUTER, computerMove);\n\n    if (playerMove === computerMove) {\n      return \"It's a tie!\";\n    }\n\n    if (this.doesMoveBeat(playerMove, computerMove)) {\n      this.handleRoundWin(PARTICIPANTS.PLAYER, playerMove);\n      this.decrementHealth(PARTICIPANTS.COMPUTER);\n      return \"You win the round!\";\n    } else {\n      this.handleRoundWin(PARTICIPANTS.COMPUTER, computerMove);\n      this.decrementHealth(PARTICIPANTS.PLAYER);\n      return \"Computer wins the round!\";\n    }\n  }\n\n  isMatchActive(): boolean {\n    return this.gameStorage.getMatch() !== null;\n  }\n\n  // ===== Score Methods =====\n\n  private setScore(key: Participant, value: number): void {\n    this.state.scores[key] = value;\n    this.gameStorage.setScore(key, value);\n  }\n\n  private getScore(key: Participant): number {\n    return this.state.scores[key];\n  }\n\n  private resetScore(key: Participant): void {\n    this.state.scores[key] = 0;\n    this.gameStorage.removeScore(key);\n  }\n\n  setPlayerScore(score: number) {\n    this.setScore(PARTICIPANTS.PLAYER, score);\n  }\n\n  setComputerScore(score: number) {\n    this.setScore(PARTICIPANTS.COMPUTER, score);\n  }\n\n  getPlayerScore(): number {\n    return this.getScore(PARTICIPANTS.PLAYER);\n  }\n\n  getComputerScore() {\n    return this.getScore(PARTICIPANTS.COMPUTER);\n  }\n\n  resetScores(): void {\n    this.resetScore(PARTICIPANTS.PLAYER);\n    this.resetScore(PARTICIPANTS.COMPUTER);\n  }\n\n  // ===== Move Methods =====\n\n  private isStandardMove(value: unknown): value is StandardMove {\n    return typeof value === \"string\" && value !== MOVES.TARA;\n  }\n\n  private setMove(key: Participant, move: Move | null): void {\n    this.state.moves[key] = move;\n  }\n\n  private getMove(key: Participant): Move | null {\n    return this.state.moves[key];\n  }\n\n  private determineMostCommonMove(moveCounts: MoveCount): StandardMove | null {\n    let mostCommonMove: StandardMove | null = null;\n    let highestCount = 0;\n    let hasMoveFrequencyTie = false;\n\n    for (const [move, count] of Object.entries(moveCounts)) {\n      if (count > highestCount) {\n        highestCount = count;\n        mostCommonMove = move as StandardMove;\n        hasMoveFrequencyTie = false;\n      } else if (count === highestCount && count !== 0) {\n        hasMoveFrequencyTie = true;\n      }\n    }\n\n    return hasMoveFrequencyTie ? null : mostCommonMove;\n  }\n\n  private resetMostCommonMove(key: Participant): void {\n    this.state.mostCommonMove[key] = null;\n    this.gameStorage.removeMostCommonMove(key);\n  }\n\n  private setMostCommonMove(key: Participant, moveCounts: MoveCount): void {\n    const mostCommonMove = this.determineMostCommonMove(moveCounts);\n    this.state.mostCommonMove[key] = mostCommonMove;\n    this.gameStorage.setMostCommonMove(key, mostCommonMove);\n  }\n\n  private getMostCommonMove(key: Participant): StandardMove | null {\n    return this.state.mostCommonMove[key];\n  }\n\n  private getAvailableMoves(hasTara: boolean): Move[] {\n    if (hasTara) {\n      return ALL_MOVE_NAMES;\n    } else {\n      return STANDARD_MOVE_NAMES;\n    }\n  }\n\n  private getBaseWeights(): Record<Move, number> {\n    return {\n      [MOVES.ROCK]: 1,\n      [MOVES.PAPER]: 1,\n      [MOVES.SCISSORS]: 1,\n      [MOVES.TARA]: 0,\n    };\n  }\n\n  private getTaraWeight(moves: Move[]): number | null {\n    if (!moves.includes(MOVES.TARA)) return null;\n\n    const { player, computer } = this.state.scores;\n    const scoreDiff = player - computer;\n\n    if (scoreDiff > 0) return Math.min(3 + scoreDiff, 10);\n    if (scoreDiff < 0) return 1;\n    return 2;\n  }\n\n  private getStandardMoveWeights(): Record<StandardMove, number> {\n    const weights: Record<StandardMove, number> = {\n      [MOVES.ROCK]: 1,\n      [MOVES.PAPER]: 1,\n      [MOVES.SCISSORS]: 1,\n    };\n\n    const mostCommon = this.state.mostCommonMove.player;\n    if (!mostCommon) return weights;\n\n    const counterMap: Record<StandardMove, StandardMove> = {\n      [MOVES.ROCK]: MOVES.PAPER,\n      [MOVES.PAPER]: MOVES.SCISSORS,\n      [MOVES.SCISSORS]: MOVES.ROCK,\n    };\n\n    const counter = counterMap[mostCommon];\n    return {\n      [MOVES.ROCK]: counter === MOVES.ROCK ? 5 : 2,\n      [MOVES.PAPER]: counter === MOVES.PAPER ? 5 : 2,\n      [MOVES.SCISSORS]: counter === MOVES.SCISSORS ? 5 : 2,\n    };\n  }\n\n  private chooseWeightedRandomMove(\n    moves: Move[],\n    weights: Record<Move, number>\n  ): Move {\n    const weightedPool = moves.flatMap((move) =>\n      Array(weights[move]).fill(move)\n    );\n    const randomIndex = Math.floor(Math.random() * weightedPool.length);\n    return weightedPool[randomIndex];\n  }\n\n  private getComputerMoveWeights(moves: Move[]): Record<Move, number> {\n    const baseWeights = this.getBaseWeights();\n    const taraWeight = this.getTaraWeight(moves);\n    const standardWeights = this.getStandardMoveWeights();\n\n    return {\n      ...baseWeights,\n      ...standardWeights,\n      ...(taraWeight !== null ? { [MOVES.TARA]: taraWeight } : {}),\n    };\n  }\n\n  private getWeightedComputerMove(): Move {\n    const hasTara = this.getComputerTaraCount() > 0;\n    const availableMoves = this.getAvailableMoves(hasTara);\n    const weights = this.getComputerMoveWeights(availableMoves);\n\n    return this.chooseWeightedRandomMove(availableMoves, weights);\n  }\n\n  setPlayerMove(move: Move | null) {\n    this.setMove(PARTICIPANTS.PLAYER, move);\n  }\n\n  getPlayerMove(): Move | null {\n    return this.getMove(PARTICIPANTS.PLAYER);\n  }\n\n  setComputerMove(move: Move | null) {\n    this.setMove(PARTICIPANTS.COMPUTER, move);\n  }\n\n  getComputerMove(): Move | null {\n    return this.getMove(PARTICIPANTS.COMPUTER);\n  }\n\n  resetMoves(): void {\n    this.setPlayerMove(null);\n    this.setComputerMove(null);\n  }\n\n  chooseComputerMove(): void {\n    const move = this.getWeightedComputerMove();\n    this.registerComputerMove(move);\n  }\n\n  registerPlayerMove(move: Move) {\n    this.setPlayerMove(move);\n    if (this.isStandardMove(move)) {\n      this.setMoveCounts(PARTICIPANTS.PLAYER, move);\n      this.setPlayerMostCommonMove();\n    }\n  }\n\n  registerComputerMove(move: Move) {\n    this.setComputerMove(move);\n    if (this.isStandardMove(move)) {\n      this.setMoveCounts(PARTICIPANTS.COMPUTER, move);\n      this.setComputerMostCommonMove();\n    }\n  }\n\n  setPlayerMostCommonMove(): void {\n    const moveCounts = this.getMoveCounts(PARTICIPANTS.PLAYER);\n    this.setMostCommonMove(PARTICIPANTS.PLAYER, moveCounts);\n  }\n\n  setComputerMostCommonMove(): void {\n    const moveCounts = this.getMoveCounts(PARTICIPANTS.COMPUTER);\n    this.setMostCommonMove(PARTICIPANTS.COMPUTER, moveCounts);\n  }\n\n  resetMostCommonMoves(): void {\n    this.resetMostCommonMove(PARTICIPANTS.PLAYER);\n    this.resetMostCommonMove(PARTICIPANTS.COMPUTER);\n  }\n\n  getPlayerMostCommonMove(): StandardMove | null {\n    return this.getMostCommonMove(PARTICIPANTS.PLAYER);\n  }\n\n  getComputerMostCommonMove(): StandardMove | null {\n    return this.getMostCommonMove(PARTICIPANTS.COMPUTER);\n  }\n\n  private setMoveCounts(key: Participant, move: StandardMove): void {\n    this.state.moveCounts[key][move] =\n      (this.state.moveCounts[key][move] || 0) + 1;\n    this.gameStorage.setMoveCounts(key, this.state.moveCounts[key]);\n  }\n\n  private resetMoveCounts(key: Participant): void {\n    this.state.moveCounts[key] = { rock: 0, paper: 0, scissors: 0 };\n    this.gameStorage.removeMoveCounts(key);\n  }\n\n  private getMoveCounts(key: Participant): MoveCount {\n    return this.state.moveCounts[key];\n  }\n\n  resetBothMoveCounts(): void {\n    this.resetMoveCounts(PARTICIPANTS.PLAYER);\n    this.resetMoveCounts(PARTICIPANTS.COMPUTER);\n  }\n\n  showMostCommonMove(): boolean {\n    return (\n      this.getPlayerMostCommonMove() !== null ||\n      this.getComputerMostCommonMove() !== null\n    );\n  }\n\n  private resetHistory(key: Participant): void {\n    this.gameStorage.removeHistory(key);\n  }\n\n  resetHistories(): void {\n    this.resetHistory(PARTICIPANTS.PLAYER);\n    this.resetHistory(PARTICIPANTS.COMPUTER);\n  }\n\n  // ===== Round Methods =====\n\n  getRoundNumber(): number {\n    return this.state.currentMatch?.matchRoundNumber ?? 1;\n  }\n\n  setRoundNumber(value: number): void {\n    if (!this.state.currentMatch) return;\n\n    this.state.currentMatch.matchRoundNumber = value;\n    this.gameStorage.setMatch(this.state.currentMatch);\n  }\n\n  increaseRoundNumber(): void {\n    const current = this.getRoundNumber();\n    this.setRoundNumber(current + 1);\n  }\n\n  // ===== Tara Methods =====\n\n  private decrementTaraCount(key: Participant): void {\n    const current = this.getTaraCount(key);\n    if (current > 1) {\n      this.setTaraCount(key, current - 1);\n    } else if (current === 1) {\n      this.resetTaraCount(key);\n    }\n  }\n\n  private handleTaraMove(key: Participant, move: Move): void {\n    if (move === MOVES.TARA) {\n      const currentTara = this.getTaraCount(key);\n      if (currentTara > 0) {\n        this.decrementTaraCount(key);\n      } else {\n        this.setMove(key, MOVES.ROCK);\n      }\n    }\n  }\n\n  private setTaraCount(key: Participant, value: number): void {\n    this.state.taras[key] = value;\n    this.gameStorage.setTaraCount(key, value);\n  }\n\n  private getTaraCount(key: Participant): number {\n    return this.state.taras[key];\n  }\n\n  private resetTaraCount(key: Participant): void {\n    this.state.taras[key] = 0;\n    this.gameStorage.removeTaraCount(key);\n  }\n\n  setPlayerTaraCount(count: number): void {\n    this.setTaraCount(PARTICIPANTS.PLAYER, count);\n  }\n\n  setComputerTaraCount(count: number): void {\n    this.setTaraCount(PARTICIPANTS.COMPUTER, count);\n  }\n\n  resetTaras(): void {\n    this.resetTaraCount(PARTICIPANTS.PLAYER);\n    this.resetTaraCount(PARTICIPANTS.COMPUTER);\n  }\n\n  getPlayerTaraCount(): number {\n    return this.getTaraCount(PARTICIPANTS.PLAYER);\n  }\n\n  getComputerTaraCount(): number {\n    return this.getTaraCount(PARTICIPANTS.COMPUTER);\n  }\n\n  taraIsEnabled(): boolean {\n    return this.getTaraCount(PARTICIPANTS.PLAYER) > 0;\n  }\n\n  // ===== Match Methods =====\n\n  handleMatchWin(): Participant {\n    const winner = this.getMatchWinner();\n\n    this.setScore(winner, this.getScore(winner) + 1);\n\n    return winner;\n  }\n\n  setMatch(match: Match | null): void {\n    this.state.currentMatch = match;\n    this.gameStorage.setMatch(match);\n  }\n\n  setMatchNumber(matchNumber: number | null): void {\n    this.state.globalMatchNumber = matchNumber;\n    this.gameStorage.setGlobalMatchNumber(matchNumber);\n  }\n\n  /**\n   * Sets default match data if no match is currently active.\n   *\n   * Used as a fallback when no match data is loaded (e.g., from `_loadOrMigrateMatchState()`).\n   * Does not overwrite existing match state.\n   */\n  setDefaultMatchData(): void {\n    const isMatchActive = this.isMatchActive();\n\n    if (!isMatchActive) {\n      this.setMatch({ ...DEFAULT_MATCH });\n    }\n  }\n\n  resetMatchData(): void {\n    this.state.currentMatch = null;\n    this.gameStorage.setMatch(null);\n    this.setMatchNumber(null);\n  }\n\n  getMatchNumber(): number {\n    return this.state.globalMatchNumber ?? 1;\n  }\n\n  isMatchOver(): boolean {\n    return (\n      this.isDefeated(PARTICIPANTS.PLAYER) ||\n      this.isDefeated(PARTICIPANTS.COMPUTER)\n    );\n  }\n\n  getMatchWinner(): Participant {\n    if (this.isDefeated(PARTICIPANTS.PLAYER)) {\n      return PARTICIPANTS.COMPUTER;\n    } else {\n      return PARTICIPANTS.PLAYER;\n    }\n  }\n\n  incrementMatchNumber(): void {\n    const currentMatchNumber = this.getMatchNumber();\n    this.setMatchNumber(currentMatchNumber + 1);\n  }\n\n  /**\n   * Initializes the game state based on available storage.\n   *\n   * This method is called during Model construction. It checks for:\n   * - A valid saved match (loads it and skips migration),\n   * - An old-format global round number (migrates it into a new match),\n   * - Or no valid data (leaves currentMatch unset).\n   *\n   * It also ensures the global match number is set appropriately.\n   */\n  private _loadOrMigrateMatchState(): void {\n    if (this.isMatchActive()) {\n      this._loadExistingMatchState();\n      return;\n    }\n\n    const oldGlobalRoundNumber = this.gameStorage.getOldGlobalRoundNumber();\n\n    if (oldGlobalRoundNumber !== null && oldGlobalRoundNumber > 0) {\n      this._migrateOldData(oldGlobalRoundNumber);\n    }\n    // Otherwise: no migration, and no existing match — do nothing.\n  }\n\n  /**\n   * Loads state for an existing match stored in the new format.\n   */\n  private _loadExistingMatchState(): void {\n    this.state.globalMatchNumber = this.gameStorage.getGlobalMatchNumber();\n    this.state.currentMatch = this.gameStorage.getMatch();\n  }\n\n  /**\n   * Migrates match state from an older game version to the current format.\n   *\n   * @param oldRoundNumber - The round number from the old game format.\n   */\n  private _migrateOldData(oldRoundNumber: number): void {\n    const migratedMatch = {\n      matchRoundNumber: oldRoundNumber,\n      playerHealth: INITIAL_HEALTH,\n      computerHealth: INITIAL_HEALTH,\n      initialHealth: INITIAL_HEALTH,\n      damagePerLoss: DAMAGE_PER_LOSS,\n    };\n\n    this.setMatch(migratedMatch);\n    this.gameStorage.removeOldGlobalRoundNumber();\n\n    this.state.globalMatchNumber = 1;\n    this.gameStorage.setGlobalMatchNumber(this.state.globalMatchNumber);\n  }\n\n  // ===== Health Methods =====\n\n  private getHealthKey(participant: Participant): keyof Match {\n    return HEALTH_KEYS[participant];\n  }\n\n  getHealth(participant: Participant): number | null {\n    const match = this.state.currentMatch;\n    if (!match) return null;\n\n    const key = this.getHealthKey(participant);\n    return match[key];\n  }\n\n  private decrementHealth(participant: Participant): boolean {\n    const match = this.state.currentMatch;\n    if (!match) return false;\n\n    const key = this.getHealthKey(participant);\n    const currentHealth = match[key];\n\n    if (currentHealth <= 0) return false;\n\n    match[key] = Math.max(0, currentHealth - DAMAGE_PER_LOSS);\n    return true;\n  }\n\n  private isDefeated(participant: Participant): boolean {\n    const health = this.getHealth(participant);\n    return health !== null && health <= 0;\n  }\n\n  // ===== END OF CLASS =====\n}\n",null,"import { Match, Move, MoveData, StandardMove } from \"./dataObjectUtils\";\n\nexport const PARTICIPANTS = {\n  PLAYER: \"player\",\n  COMPUTER: \"computer\",\n} as const;\n\nexport const INITIAL_ROUND_NUMBER = 1;\nexport const INITIAL_HEALTH = 100;\nexport const DAMAGE_PER_LOSS = 50;\nexport const DEFAULT_MATCH_NUMBER = 1;\n\nexport const DEFAULT_MATCH: Match = {\n  matchRoundNumber: INITIAL_ROUND_NUMBER,\n  playerHealth: INITIAL_HEALTH,\n  computerHealth: INITIAL_HEALTH,\n};\n\nexport const HEALTH_KEYS = {\n  player: \"playerHealth\",\n  computer: \"computerHealth\",\n} as const;\n\nexport const MOVES = {\n  ROCK: \"rock\",\n  PAPER: \"paper\",\n  SCISSORS: \"scissors\",\n  TARA: \"tara\",\n} as const;\n\nexport const MOVE_DATA = [\n  { name: MOVES.ROCK, beats: [MOVES.SCISSORS] },\n  { name: MOVES.PAPER, beats: [MOVES.ROCK] },\n  { name: MOVES.SCISSORS, beats: [MOVES.PAPER] },\n  {\n    name: MOVES.TARA,\n    beats: [MOVES.ROCK, MOVES.PAPER, MOVES.SCISSORS],\n  },\n] as const;\n\nexport const ALL_MOVE_NAMES: Move[] = MOVE_DATA.map((data) => data.name);\n\nexport const MOVE_DATA_MAP: ReadonlyMap<Move, MoveData> = new Map(\n  MOVE_DATA.map((move) => [move.name, move])\n);\n\nexport const STANDARD_MOVE_DATA = MOVE_DATA.filter(\n  (move) => move.name !== MOVES.TARA\n);\nexport const STANDARD_MOVE_NAMES: StandardMove[] = STANDARD_MOVE_DATA.map(\n  (data) => data.name\n);\n\nexport const STANDARD_MOVE_DATA_MAP: ReadonlyMap<StandardMove, MoveData> =\n  new Map(STANDARD_MOVE_DATA.map((move) => [move.name, move]));\n",null,"import { IGameStorage } from \"./gameStorage\";\nimport {\n  Match,\n  MoveCount,\n  Participant,\n  StandardMove,\n} from \"../utils/dataObjectUtils\";\nimport { MOVES, STANDARD_MOVE_NAMES } from \"../utils/dataUtils\";\n\nconst KEY_SUFFIX_SCORE = \"Score\";\nconst KEY_SUFFIX_TARA_COUNT = \"TaraCount\";\nconst KEY_SUFFIX_MOST_COMMON_MOVE = \"MostCommonMove\";\nconst KEY_SUFFIX_MOVE_COUNTS = \"MoveCounts\";\nconst KEY_SUFFIX_HISTORY = \"History\";\n\nconst KEY_ROUND_NUMBER = \"roundNumber\";\nconst KEY_GLOBAL_MATCH_NUMBER = \"globalMatchNumber\";\nconst KEY_CURRENT_MATCH = \"currentMatch\";\n\nconst DEFAULT_NUMERIC_VALUE = 0;\n\nconst DEFAULT_MOVE_COUNTS: MoveCount = {\n  [MOVES.ROCK]: 0,\n  [MOVES.PAPER]: 0,\n  [MOVES.SCISSORS]: 0,\n};\n\n/**\n * Implementation of IGameStorage using browser's localStorage.\n */\nexport class LocalStorageGameStorage implements IGameStorage {\n  private formatKey(participant: Participant, suffix: string): string {\n    return `${participant}${suffix}`;\n  }\n\n  private safelySetItem(key: string, value: string): void {\n    try {\n      localStorage.setItem(key, value);\n    } catch (e) {\n      console.warn(`LocalStorage Error: Failed to save \"${key}\".`, e);\n    }\n  }\n\n  // ===== Getters =====\n\n  getScore(participant: Participant): number {\n    const key = this.formatKey(participant, KEY_SUFFIX_SCORE);\n    return parseInt(\n      localStorage.getItem(key) || DEFAULT_NUMERIC_VALUE.toString(),\n      10\n    );\n  }\n\n  getTaraCount(participant: Participant): number {\n    const key = this.formatKey(participant, KEY_SUFFIX_TARA_COUNT);\n    return parseInt(\n      localStorage.getItem(key) || DEFAULT_NUMERIC_VALUE.toString(),\n      10\n    );\n  }\n\n  getMostCommonMove(participant: Participant): StandardMove | null {\n    const key = this.formatKey(participant, KEY_SUFFIX_MOST_COMMON_MOVE);\n    const move = localStorage.getItem(key);\n    return move && STANDARD_MOVE_NAMES.includes(move as StandardMove)\n      ? (move as StandardMove)\n      : null;\n  }\n\n  getMoveCounts(participant: Participant): MoveCount {\n    const key = this.formatKey(participant, KEY_SUFFIX_MOVE_COUNTS);\n    try {\n      const raw = localStorage.getItem(key);\n      return raw ? JSON.parse(raw) : DEFAULT_MOVE_COUNTS;\n    } catch (e) {\n      console.warn(`LocalStorage Error: Failed to parse \"${key}\".`, e);\n      return DEFAULT_MOVE_COUNTS;\n    }\n  }\n\n  getGlobalMatchNumber(): number | null {\n    const stored = localStorage.getItem(KEY_GLOBAL_MATCH_NUMBER);\n    return stored !== null ? parseInt(stored, 10) : null;\n  }\n\n  getMatch(): Match | null {\n    try {\n      const raw = localStorage.getItem(KEY_CURRENT_MATCH);\n      return raw ? JSON.parse(raw) : null;\n    } catch (e) {\n      console.warn(`LocalStorage Error: Failed to parse currentMatch.`, e);\n      return null;\n    }\n  }\n\n  getOldGlobalRoundNumber(): number | null {\n    const roundString = localStorage.getItem(KEY_ROUND_NUMBER);\n\n    // If the item doesn't exist in localStorage, getItem returns null.\n    if (roundString === null) {\n      return null;\n    }\n\n    // Attempt to parse the string to an integer.\n    const parsedRound = parseInt(roundString, 10);\n\n    // Check if parsing resulted in NaN (Not a Number), meaning the stored value was invalid.\n    if (isNaN(parsedRound)) {\n      console.warn(\n        `Legacy 'roundNumber' in localStorage (${roundString}) is not a valid number. Skipping migration.`\n      );\n      return null; // Treat invalid data as if it doesn't exist for migration purposes\n    }\n\n    return parsedRound;\n  }\n\n  // ===== Setters =====\n\n  setScore(participant: Participant, score: number): void {\n    const key = this.formatKey(participant, KEY_SUFFIX_SCORE);\n    this.safelySetItem(key, score.toString());\n  }\n\n  setTaraCount(participant: Participant, count: number): void {\n    const key = this.formatKey(participant, KEY_SUFFIX_TARA_COUNT);\n    this.safelySetItem(key, count.toString());\n  }\n\n  setMostCommonMove(participant: Participant, move: StandardMove | null): void {\n    const key = this.formatKey(participant, KEY_SUFFIX_MOST_COMMON_MOVE);\n    if (move) {\n      this.safelySetItem(key, move);\n    } else {\n      localStorage.removeItem(key);\n    }\n  }\n\n  setMoveCounts(participant: Participant, moveCounts: MoveCount): void {\n    const key = this.formatKey(participant, KEY_SUFFIX_MOVE_COUNTS);\n    this.safelySetItem(key, JSON.stringify(moveCounts));\n  }\n\n  setGlobalMatchNumber(matchNumber: number | null): void {\n    if (matchNumber) {\n      this.safelySetItem(KEY_GLOBAL_MATCH_NUMBER, matchNumber.toString());\n    } else {\n      localStorage.removeItem(KEY_GLOBAL_MATCH_NUMBER);\n    }\n  }\n\n  setMatch(match: Match | null): void {\n    if (match) {\n      this.safelySetItem(KEY_CURRENT_MATCH, JSON.stringify(match));\n    } else {\n      localStorage.removeItem(KEY_CURRENT_MATCH);\n    }\n  }\n\n  // ===== Removers =====\n\n  removeScore(participant: Participant): void {\n    const key = this.formatKey(participant, KEY_SUFFIX_SCORE);\n    localStorage.removeItem(key);\n  }\n\n  removeTaraCount(participant: Participant): void {\n    const key = this.formatKey(participant, KEY_SUFFIX_TARA_COUNT);\n    localStorage.removeItem(key);\n  }\n\n  removeMostCommonMove(participant: Participant): void {\n    const key = this.formatKey(participant, KEY_SUFFIX_MOST_COMMON_MOVE);\n    localStorage.removeItem(key);\n  }\n\n  removeMoveCounts(participant: Participant): void {\n    const key = this.formatKey(participant, KEY_SUFFIX_MOVE_COUNTS);\n    localStorage.removeItem(key);\n  }\n\n  removeHistory(participant: Participant): void {\n    const key = this.formatKey(participant, KEY_SUFFIX_HISTORY);\n    localStorage.removeItem(key);\n  }\n\n  removeGlobalMatchNumber(): void {\n    localStorage.removeItem(KEY_GLOBAL_MATCH_NUMBER);\n  }\n\n  removeOldGlobalRoundNumber(): void {\n    localStorage.removeItem(KEY_ROUND_NUMBER);\n  }\n}\n",null,"import { Move, Participant, StandardMove } from \"./utils/dataObjectUtils\";\nimport { MOVES } from \"./utils/dataUtils\";\n\nexport class View {\n  private messageEl = document.getElementById(\"message\");\n  private playerScoreEl = document.getElementById(\"player-score\");\n  private computerScoreEl = document.getElementById(\"computer-score\");\n  private playerHealthEl = document.getElementById(\"player-health\");\n  private computerHealthEl = document.getElementById(\"computer-health\");\n  private playerMostCommonMoveEl = document.getElementById(\n    \"player-most-common-move\"\n  );\n  private computerMostCommonMoveEl = document.getElementById(\n    \"computer-most-common-move\"\n  );\n  private movesEl = document.getElementById(\"round-moves\")!;\n  private resultEl = document.getElementById(\"round-result\")!;\n  private taraBtn = document.getElementById(\"tara\")!;\n  private startBtn = document.getElementById(\"start\");\n\n  // ===== General Methods =====\n\n  updateMessage(text: string): void {\n    if (this.messageEl) {\n      this.messageEl.textContent = text;\n    }\n  }\n\n  toggleStartButton(show: boolean): void {\n    const btn = document.getElementById(\"start\");\n    if (btn) btn.style.display = show ? \"inline\" : \"none\";\n  }\n\n  updateRound(round: number): void {\n    const roundElem = document.getElementById(\"round\");\n    if (roundElem) {\n      roundElem.textContent = `Round ${round}`;\n      roundElem.style.display = \"block\";\n    }\n  }\n\n  updateMatch(match: number): void {\n    const matchElem = document.getElementById(\"match\");\n    if (matchElem) {\n      matchElem.textContent = `Match ${match}`;\n      matchElem.style.display = \"block\";\n    }\n  }\n\n  showRoundOutcome(\n    playerMove: Move | null,\n    computerMove: Move | null,\n    result: string\n  ): void {\n    this.movesEl.textContent = `You played ${playerMove}. Computer played ${computerMove}.`;\n    this.resultEl.textContent = result.toUpperCase();\n    this.movesEl.style.display = \"block\";\n    this.resultEl.style.display = \"block\";\n  }\n\n  showMatchOutcome(\n    playerMove: Move | null,\n    computerMove: Move | null,\n    winner: Participant\n  ): void {\n    this.movesEl.textContent = `You played ${playerMove}. Computer played ${computerMove}.`;\n    this.resultEl.textContent = `${winner.toUpperCase()} WON THE MATCH!`;\n    this.movesEl.style.display = \"block\";\n    this.resultEl.style.display = \"block\";\n  }\n\n  toggleResetGameState(show: boolean): void {\n    const btn = document.getElementById(\"reset-game-state\");\n    if (btn) btn.style.display = show ? \"inline-block\" : \"none\";\n  }\n\n  toggleMoveButtons(show: boolean): void {\n    Object.values(MOVES).forEach((move) => {\n      const btn = document.getElementById(move);\n      if (btn) btn.style.display = show ? \"inline\" : \"none\";\n    });\n  }\n\n  togglePlayAgain(show: boolean): void {\n    const btn = document.getElementById(\"play-again\");\n    if (btn) btn.style.display = show ? \"inline-block\" : \"none\";\n  }\n\n  toggleMostCommonMoveTable(show: boolean): void {\n    const table = document.getElementById(\"most-common-move-table\");\n    if (table) table.style.display = show ? \"table\" : \"none\";\n  }\n\n  resetForNextRound(): void {\n    this.toggleHealthTable(true);\n    this.toggleMostCommonMoveTable(true);\n    this.toggleMoveButtons(true);\n    this.togglePlayAgain(false);\n\n    this.movesEl.style.display = \"none\";\n    this.resultEl.style.display = \"none\";\n  }\n\n  updateStartButton(isMatchActive: boolean): void {\n    if (this.startBtn && isMatchActive) {\n      this.startBtn.textContent = `Resume Match`;\n    } else if (this.startBtn && !isMatchActive) {\n      this.startBtn.textContent = `Start Match`;\n    }\n  }\n\n  // ===== Score Methods =====\n\n  updateScores(player: number, computer: number): void {\n    if (this.playerScoreEl) this.playerScoreEl.textContent = player.toString();\n    if (this.computerScoreEl)\n      this.computerScoreEl.textContent = computer.toString();\n  }\n\n  // ===== Tara Methods =====\n\n  updateTaraCounts(playerCount: number, computerCount: number): void {\n    document.getElementById(\"player-tara\")!.textContent =\n      playerCount.toString();\n    document.getElementById(\"computer-tara\")!.textContent =\n      computerCount.toString();\n  }\n\n  updateTaraButton(isEnabled: boolean, taraCount: number): void {\n    if (this.taraBtn instanceof HTMLButtonElement) {\n      this.taraBtn.disabled = !isEnabled;\n    }\n\n    this.taraBtn.textContent = `Tara (x${taraCount})`;\n  }\n\n  // ===== History Methods =====\n\n  updateMostCommonMoves(\n    player: StandardMove | null,\n    computer: StandardMove | null\n  ): void {\n    if (this.playerMostCommonMoveEl)\n      this.playerMostCommonMoveEl.textContent = player ?? \"X\";\n    if (this.computerMostCommonMoveEl)\n      this.computerMostCommonMoveEl.textContent = computer ?? \"X\";\n  }\n\n  // ===== Health Methods =====\n\n  updateHealth(\n    playerHealth: number | null,\n    computerHealth: number | null\n  ): void {\n    this.playerHealthEl!.textContent = (playerHealth ?? 0).toString();\n    this.computerHealthEl!.textContent = (computerHealth ?? 0).toString();\n  }\n\n  toggleHealthTable(show: boolean): void {\n    const table = document.getElementById(\"health-table\");\n    if (table) table.style.display = show ? \"table\" : \"none\";\n  }\n}\n","import { Model } from \"../model/model\";\nimport { View } from \"../view\";\nimport { Move } from \"../utils/dataObjectUtils\";\nimport { MOVES, PARTICIPANTS } from \"../utils/dataUtils\";\n\nexport class Controller {\n  private model: Model;\n  private view: View;\n\n  constructor(model: Model, view: View) {\n    this.model = model;\n    this.view = view;\n  }\n\n  private updateScoreView(): void {\n    this.view.updateScores(\n      this.model.getPlayerScore(),\n      this.model.getComputerScore()\n    );\n  }\n\n  private updateTaraView(): void {\n    this.view.updateTaraCounts(\n      this.model.getPlayerTaraCount(),\n      this.model.getComputerTaraCount()\n    );\n  }\n\n  private updateMostCommonMoveView(): void {\n    this.view.updateMostCommonMoves(\n      this.model.getPlayerMostCommonMove(),\n      this.model.getComputerMostCommonMove()\n    );\n  }\n\n  private updateHealthView(): void {\n    this.view.updateHealth(\n      this.model.getHealth(PARTICIPANTS.PLAYER),\n      this.model.getHealth(PARTICIPANTS.COMPUTER)\n    );\n  }\n\n  private updateTaraButtonView(): void {\n    const isEnabled = this.model.taraIsEnabled();\n    const taraCount = this.model.getPlayerTaraCount();\n    this.view.updateTaraButton(isEnabled, taraCount);\n  }\n\n  private startGame(): void {\n    const roundNumber = this.model.getRoundNumber();\n    const matchNumber = this.model.getMatchNumber();\n    const showMostCommonMove = this.model.showMostCommonMove();\n\n    this.model.setDefaultMatchData();\n    this.view.updateRound(roundNumber);\n    this.view.updateMatch(matchNumber);\n    this.view.toggleStartButton(false);\n    this.view.toggleResetGameState(false);\n    this.view.toggleHealthTable(true);\n    this.view.toggleMostCommonMoveTable(showMostCommonMove);\n    this.view.toggleMoveButtons(true);\n    this.updateHealthView();\n  }\n\n  private endRound(): void {\n    const playerMove = this.model.getPlayerMove();\n    const computerMove = this.model.getComputerMove();\n    const result = this.model.evaluateRound();\n    const isMatchOver = this.model.isMatchOver();\n\n    this.updateHealthView();\n\n    if (isMatchOver) {\n      const winner = this.model.handleMatchWin();\n      this.view.showMatchOutcome(playerMove, computerMove, winner);\n      this.model.incrementMatchNumber();\n      this.model.setMatch(null);\n    } else {\n      this.view.showRoundOutcome(playerMove, computerMove, result);\n      this.model.increaseRoundNumber();\n    }\n\n    this.view.toggleMostCommonMoveTable(false);\n    this.view.toggleMoveButtons(false);\n    this.view.togglePlayAgain(true);\n    this.updateScoreView();\n    this.updateTaraView();\n    this.updateMostCommonMoveView();\n    this.updateTaraButtonView();\n  }\n\n  private handleNextRound(): void {\n    this.model.setDefaultMatchData();\n\n    const roundNumber = this.model.getRoundNumber();\n    const matchNumber = this.model.getMatchNumber();\n\n    this.updateHealthView();\n    this.view.updateRound(roundNumber);\n    this.view.updateMatch(matchNumber);\n    this.view.resetForNextRound();\n  }\n\n  resetGameState(): void {\n    this.model.resetScores();\n    this.model.resetMoves();\n    this.model.resetTaras();\n    this.model.resetHistories();\n    this.model.resetBothMoveCounts();\n    this.model.resetMostCommonMoves();\n    this.model.resetMatchData();\n\n    this.updateScoreView();\n    this.updateTaraView();\n    this.updateHealthView();\n    this.updateMostCommonMoveView();\n    this.updateTaraButtonView();\n\n    const isMatchActive = this.model.isMatchActive();\n    this.view.updateStartButton(isMatchActive);\n  }\n\n  handlePlayerMove(move: Move): void {\n    this.model.resetMoves();\n    this.model.registerPlayerMove(move);\n    this.model.chooseComputerMove();\n\n    this.endRound();\n  }\n\n  initialize(): void {\n    const isMatchActive = this.model.isMatchActive();\n\n    this.view.updateMessage(\"Rock, Paper, Scissors, Tara\");\n    this.updateScoreView();\n    this.updateTaraView();\n    this.updateMostCommonMoveView();\n    this.updateTaraButtonView();\n    this.view.updateStartButton(isMatchActive);\n    this.view.toggleHealthTable(false);\n    this.view.toggleMostCommonMoveTable(false);\n    this.view.toggleMoveButtons(false);\n    this.view.togglePlayAgain(false);\n    this.view.toggleStartButton(true);\n\n    document\n      .getElementById(\"start\")\n      ?.addEventListener(\"click\", () => this.startGame());\n\n    document\n      .getElementById(\"play-again\")\n      ?.addEventListener(\"click\", () => this.handleNextRound());\n\n    Object.values(MOVES).forEach((move) => {\n      document\n        .getElementById(move)\n        ?.addEventListener(\"click\", () => this.handlePlayerMove(move));\n    });\n\n    document\n      .getElementById(\"reset-game-state\")\n      ?.addEventListener(\"click\", () => this.resetGameState());\n  }\n}\n",null],"names":["$71f329d8a7c8539f$export$10aaa7122e2cf6d6","PLAYER","COMPUTER","$71f329d8a7c8539f$export$2de13e891a662beb","matchRoundNumber","playerHealth","computerHealth","$71f329d8a7c8539f$export$3528b598622357c7","player","computer","$71f329d8a7c8539f$export$67f072146e5978c8","ROCK","PAPER","SCISSORS","TARA","$71f329d8a7c8539f$export$97019d86eac04150","name","beats","$71f329d8a7c8539f$export$31531e938145c246","map","data","$71f329d8a7c8539f$export$f1cdc934597ad339","Map","move","$71f329d8a7c8539f$export$e004b108e63e350d","filter","$71f329d8a7c8539f$export$11a493a8727aac2a","$dc0137b9424d8dd1$var$KEY_SUFFIX_SCORE","$dc0137b9424d8dd1$var$KEY_SUFFIX_TARA_COUNT","$dc0137b9424d8dd1$var$KEY_SUFFIX_MOST_COMMON_MOVE","$dc0137b9424d8dd1$var$KEY_SUFFIX_MOVE_COUNTS","$dc0137b9424d8dd1$var$KEY_ROUND_NUMBER","$dc0137b9424d8dd1$var$KEY_GLOBAL_MATCH_NUMBER","$dc0137b9424d8dd1$var$KEY_CURRENT_MATCH","$dc0137b9424d8dd1$var$DEFAULT_MOVE_COUNTS","$dc0137b9424d8dd1$export$77bd854ea05fa7f7","formatKey","participant","suffix","safelySetItem","key","value","localStorage","setItem","e","console","warn","getScore","parseInt","getItem","$dc0137b9424d8dd1$var$DEFAULT_NUMERIC_VALUE","getTaraCount","getMostCommonMove","includes","getMoveCounts","raw","JSON","parse","getGlobalMatchNumber","stored","getMatch","getOldGlobalRoundNumber","roundString","parsedRound","isNaN","setScore","score","toString","setTaraCount","count","setMostCommonMove","removeItem","setMoveCounts","moveCounts","stringify","setGlobalMatchNumber","matchNumber","setMatch","match","removeScore","removeTaraCount","removeMostCommonMove","removeMoveCounts","removeHistory","removeGlobalMatchNumber","removeOldGlobalRoundNumber","$98c16915bb808846$export$a1edc412be3e1841","state","scores","moves","taras","mostCommonMove","rock","paper","scissors","globalMatchNumber","currentMatch","gameStorage","constructor","_loadOrMigrateMatchState","doesMoveBeat","a","b","get","handleRoundWin","winner","winningMove","isStandardMove","currentTara","evaluateRound","playerMove","getPlayerMove","computerMove","getComputerMove","handleTaraMove","decrementHealth","isMatchActive","resetScore","setPlayerScore","setComputerScore","getPlayerScore","getComputerScore","resetScores","setMove","getMove","determineMostCommonMove","highestCount","hasMoveFrequencyTie","Object","entries","resetMostCommonMove","getAvailableMoves","hasTara","getBaseWeights","getTaraWeight","scoreDiff","Math","min","getStandardMoveWeights","weights","mostCommon","counter","counterMap","chooseWeightedRandomMove","weightedPool","flatMap","Array","fill","randomIndex","floor","random","length","getComputerMoveWeights","baseWeights","taraWeight","standardWeights","getWeightedComputerMove","getComputerTaraCount","availableMoves","setPlayerMove","setComputerMove","resetMoves","chooseComputerMove","registerComputerMove","registerPlayerMove","setPlayerMostCommonMove","setComputerMostCommonMove","resetMostCommonMoves","getPlayerMostCommonMove","getComputerMostCommonMove","resetMoveCounts","resetBothMoveCounts","showMostCommonMove","resetHistory","resetHistories","getRoundNumber","setRoundNumber","increaseRoundNumber","current","decrementTaraCount","resetTaraCount","setPlayerTaraCount","setComputerTaraCount","resetTaras","getPlayerTaraCount","taraIsEnabled","handleMatchWin","getMatchWinner","setMatchNumber","setDefaultMatchData","resetMatchData","getMatchNumber","isMatchOver","isDefeated","incrementMatchNumber","currentMatchNumber","_loadExistingMatchState","oldGlobalRoundNumber","_migrateOldData","oldRoundNumber","initialHealth","damagePerLoss","getHealthKey","getHealth","currentHealth","max","health","$ffbecafb1344018e$export$27a5bd065ad55220","messageEl","document","getElementById","playerScoreEl","computerScoreEl","playerHealthEl","computerHealthEl","playerMostCommonMoveEl","computerMostCommonMoveEl","movesEl","resultEl","taraBtn","startBtn","updateMessage","text","textContent","toggleStartButton","show","btn","style","display","updateRound","round","roundElem","updateMatch","matchElem","showRoundOutcome","result","toUpperCase","showMatchOutcome","toggleResetGameState","toggleMoveButtons","values","forEach","togglePlayAgain","toggleMostCommonMoveTable","table","resetForNextRound","toggleHealthTable","updateStartButton","updateScores","updateTaraCounts","playerCount","computerCount","updateTaraButton","isEnabled","taraCount","HTMLButtonElement","disabled","updateMostCommonMoves","updateHealth","$44521653474fa731$export$bd0bf19f25da8474","model","view","updateScoreView","updateTaraView","updateMostCommonMoveView","updateHealthView","updateTaraButtonView","startGame","roundNumber","endRound","handleNextRound","resetGameState","handlePlayerMove","initialize","addEventListener","controller"],"version":3,"file":"public.328cb7a1.js.map"}